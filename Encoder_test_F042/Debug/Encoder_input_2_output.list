
Encoder_input_2_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080025cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080025cc  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c340  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d6  00000000  00000000  0002c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db8  00000000  00000000  0002f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6e1  00000000  00000000  00046e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4f0  00000000  00000000  00053571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  000e0ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002568 	.word	0x08002568

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002568 	.word	0x08002568

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_IC_CaptureCallback>:
int32_t counter = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	counter = (int32_t)__HAL_TIM_GET_COUNTER(htim);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800022e:	001a      	movs	r2, r3
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000f4 	.word	0x200000f4

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fb4c 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f826 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f8f2 	bl	8000434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000250:	f000 f8c0 	bl	80003d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000254:	f000 f85c 	bl	8000310 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(HAL_GPIO_ReadPin(Button_in_GPIO_Port, Button_in_Pin) == GPIO_PIN_RESET){
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <main+0x4c>)
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fe0d 	bl	8000e7c <HAL_GPIO_ReadPin>
 8000262:	1e03      	subs	r3, r0, #0
 8000264:	d1f8      	bne.n	8000258 <main+0x18>
		 HAL_Delay(20);
 8000266:	2014      	movs	r0, #20
 8000268:	f000 fb9e 	bl	80009a8 <HAL_Delay>
		 if(HAL_GPIO_ReadPin(Button_in_GPIO_Port, Button_in_Pin) == GPIO_PIN_RESET){
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <main+0x4c>)
 800026e:	2140      	movs	r1, #64	; 0x40
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fe03 	bl	8000e7c <HAL_GPIO_ReadPin>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d1ee      	bne.n	8000258 <main+0x18>
			 counter = 0;
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <main+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <main+0x54>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
	 if(HAL_GPIO_ReadPin(Button_in_GPIO_Port, Button_in_Pin) == GPIO_PIN_RESET){
 8000288:	e7e6      	b.n	8000258 <main+0x18>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	48000400 	.word	0x48000400
 8000290:	200000f4 	.word	0x200000f4
 8000294:	20000028 	.word	0x20000028

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b093      	sub	sp, #76	; 0x4c
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2414      	movs	r4, #20
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	; 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 f955 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f002 f94e 	bl	8002558 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2220      	movs	r2, #32
 80002c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2201      	movs	r2, #1
 80002c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe0d 	bl	8000ef0 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002da:	f000 f9bb 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2207      	movs	r2, #7
 80002e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2203      	movs	r2, #3
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2101      	movs	r1, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f97e 	bl	80015fc <HAL_RCC_ClockConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000304:	f000 f9a6 	bl	8000654 <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b013      	add	sp, #76	; 0x4c
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b08d      	sub	sp, #52	; 0x34
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000316:	240c      	movs	r4, #12
 8000318:	193b      	adds	r3, r7, r4
 800031a:	0018      	movs	r0, r3
 800031c:	2324      	movs	r3, #36	; 0x24
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 f919 	bl	8002558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	2308      	movs	r3, #8
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 f912 	bl	8002558 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <MX_TIM2_Init+0xc0>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	05d2      	lsls	r2, r2, #23
 800033a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <MX_TIM2_Init+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <MX_TIM2_Init+0xc0>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000348:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <MX_TIM2_Init+0xc0>)
 800034a:	2201      	movs	r2, #1
 800034c:	4252      	negs	r2, r2
 800034e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_TIM2_Init+0xc0>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_TIM2_Init+0xc0>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800035c:	0021      	movs	r1, r4
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2203      	movs	r2, #3
 8000362:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2202      	movs	r2, #2
 8000368:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2201      	movs	r2, #1
 800036e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2202      	movs	r2, #2
 8000380:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2201      	movs	r2, #1
 8000386:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000394:	187a      	adds	r2, r7, r1
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_TIM2_Init+0xc0>)
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f001 faa8 	bl	80018f0 <HAL_TIM_Encoder_Init>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003a4:	f000 f956 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b4:	1d3a      	adds	r2, r7, #4
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_TIM2_Init+0xc0>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fcec 	bl	8001d98 <HAL_TIMEx_MasterConfigSynchronization>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80003c4:	f000 f946 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b00d      	add	sp, #52	; 0x34
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	20000028 	.word	0x20000028

080003d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MX_USART2_UART_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e0:	2296      	movs	r2, #150	; 0x96
 80003e2:	0212      	lsls	r2, r2, #8
 80003e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fd25 	bl	8001e68 <HAL_UART_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 f917 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000070 	.word	0x20000070
 8000430:	40004400 	.word	0x40004400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b089      	sub	sp, #36	; 0x24
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	240c      	movs	r4, #12
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2314      	movs	r3, #20
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 f887 	bl	8002558 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <MX_GPIO_Init+0xd4>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	03c9      	lsls	r1, r1, #15
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_GPIO_Init+0xd4>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	03db      	lsls	r3, r3, #15
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b27      	ldr	r3, [pc, #156]	; (8000508 <MX_GPIO_Init+0xd4>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0289      	lsls	r1, r1, #10
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	029b      	lsls	r3, r3, #10
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	02c9      	lsls	r1, r1, #11
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_GPIO_Init+0xd4>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	02db      	lsls	r3, r3, #11
 8000498:	4013      	ands	r3, r2
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ENCODER_B_Pin ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin|ENCODER_A_Pin;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2281      	movs	r2, #129	; 0x81
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	22c4      	movs	r2, #196	; 0xc4
 80004a8:	0392      	lsls	r2, r2, #14
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <MX_GPIO_Init+0xd8>)
 80004b6:	0019      	movs	r1, r3
 80004b8:	0010      	movs	r0, r2
 80004ba:	f000 fb77 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_in_Pin */
  GPIO_InitStruct.Pin = Button_in_Pin;
 80004be:	0021      	movs	r1, r4
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2240      	movs	r2, #64	; 0x40
 80004c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_in_GPIO_Port, &GPIO_InitStruct);
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <MX_GPIO_Init+0xd8>)
 80004d6:	0019      	movs	r1, r3
 80004d8:	0010      	movs	r0, r2
 80004da:	f000 fb67 	bl	8000bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	2005      	movs	r0, #5
 80004e4:	f000 fb30 	bl	8000b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004e8:	2005      	movs	r0, #5
 80004ea:	f000 fb42 	bl	8000b72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2007      	movs	r0, #7
 80004f4:	f000 fb28 	bl	8000b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004f8:	2007      	movs	r0, #7
 80004fa:	f000 fb3a 	bl	8000b72 <HAL_NVIC_EnableIRQ>

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b009      	add	sp, #36	; 0x24
 8000504:	bd90      	pop	{r4, r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
uint8_t old_enc_state = 0;
uint8_t new_enc_state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	1dbb      	adds	r3, r7, #6
 800051a:	801a      	strh	r2, [r3, #0]
	 * 	0	-	1
	 * 	1	-	1
	 * 	1	-	0
	 * 	0	-	0
	 */
	if(GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin){
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2b80      	cmp	r3, #128	; 0x80
 8000522:	d004      	beq.n	800052e <HAL_GPIO_EXTI_Callback+0x1e>
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d000      	beq.n	800052e <HAL_GPIO_EXTI_Callback+0x1e>
 800052c:	e086      	b.n	800063c <HAL_GPIO_EXTI_Callback+0x12c>
		new_enc_state = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin) << 1| HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 800052e:	4b45      	ldr	r3, [pc, #276]	; (8000644 <HAL_GPIO_EXTI_Callback+0x134>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fca2 	bl	8000e7c <HAL_GPIO_ReadPin>
 8000538:	0003      	movs	r3, r0
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	b25c      	sxtb	r4, r3
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <HAL_GPIO_EXTI_Callback+0x134>)
 8000540:	2101      	movs	r1, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fc9a 	bl	8000e7c <HAL_GPIO_ReadPin>
 8000548:	0003      	movs	r3, r0
 800054a:	b25b      	sxtb	r3, r3
 800054c:	4323      	orrs	r3, r4
 800054e:	b25b      	sxtb	r3, r3
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000554:	701a      	strb	r2, [r3, #0]
		if(old_enc_state == 0 && new_enc_state == 1){
 8000556:	4b3d      	ldr	r3, [pc, #244]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d109      	bne.n	8000572 <HAL_GPIO_EXTI_Callback+0x62>
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d105      	bne.n	8000572 <HAL_GPIO_EXTI_Callback+0x62>
			counter++;
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	e060      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 1 && new_enc_state == 3){
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d109      	bne.n	800058e <HAL_GPIO_EXTI_Callback+0x7e>
 800057a:	4b33      	ldr	r3, [pc, #204]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d105      	bne.n	800058e <HAL_GPIO_EXTI_Callback+0x7e>
			counter++;
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	e052      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 3 && new_enc_state == 2){
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b03      	cmp	r3, #3
 8000594:	d109      	bne.n	80005aa <HAL_GPIO_EXTI_Callback+0x9a>
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d105      	bne.n	80005aa <HAL_GPIO_EXTI_Callback+0x9a>
			counter++;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	e044      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 2 && new_enc_state == 0){
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d109      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0xb6>
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d105      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0xb6>
			counter++;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e036      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 0 && new_enc_state == 2){
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_GPIO_EXTI_Callback+0xd2>
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d105      	bne.n	80005e2 <HAL_GPIO_EXTI_Callback+0xd2>
			counter--;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e028      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 2 && new_enc_state == 3){
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d109      	bne.n	80005fe <HAL_GPIO_EXTI_Callback+0xee>
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d105      	bne.n	80005fe <HAL_GPIO_EXTI_Callback+0xee>
			counter--;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e01a      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 3 && new_enc_state == 1){
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b03      	cmp	r3, #3
 8000604:	d109      	bne.n	800061a <HAL_GPIO_EXTI_Callback+0x10a>
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d105      	bne.n	800061a <HAL_GPIO_EXTI_Callback+0x10a>
			counter--;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e00c      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
		}else if(old_enc_state == 1 && new_enc_state == 0){
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d108      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d104      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x124>
			counter--;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_GPIO_EXTI_Callback+0x140>)
 8000632:	601a      	str	r2, [r3, #0]
		}
		old_enc_state = new_enc_state;
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <HAL_GPIO_EXTI_Callback+0x138>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_GPIO_EXTI_Callback+0x13c>)
 800063a:	701a      	strb	r2, [r3, #0]
	}
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b003      	add	sp, #12
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	48000400 	.word	0x48000400
 8000648:	200000f9 	.word	0x200000f9
 800064c:	200000f8 	.word	0x200000f8
 8000650:	200000f4 	.word	0x200000f4

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x44>)
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_MspInit+0x44>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	619a      	str	r2, [r3, #24]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x44>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_MspInit+0x44>)
 8000680:	69da      	ldr	r2, [r3, #28]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_MspInit+0x44>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0549      	lsls	r1, r1, #21
 8000688:	430a      	orrs	r2, r1
 800068a:	61da      	str	r2, [r3, #28]
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_MspInit+0x44>)
 800068e:	69da      	ldr	r2, [r3, #28]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	055b      	lsls	r3, r3, #21
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08b      	sub	sp, #44	; 0x2c
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	2414      	movs	r4, #20
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f001 ff4c 	bl	8002558 <memset>
  if(htim_encoder->Instance==TIM2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d138      	bne.n	800073e <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006ce:	69da      	ldr	r2, [r3, #28]
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006d2:	2101      	movs	r1, #1
 80006d4:	430a      	orrs	r2, r1
 80006d6:	61da      	str	r2, [r3, #28]
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	2201      	movs	r2, #1
 80006de:	4013      	ands	r3, r2
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	0289      	lsls	r1, r1, #10
 80006ee:	430a      	orrs	r2, r1
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	029b      	lsls	r3, r3, #10
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2202      	movs	r2, #2
 800070c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	187a      	adds	r2, r7, r1
 8000722:	2390      	movs	r3, #144	; 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa3f 	bl	8000bac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200f      	movs	r0, #15
 8000734:	f000 fa08 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000738:	200f      	movs	r0, #15
 800073a:	f000 fa1a 	bl	8000b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b00b      	add	sp, #44	; 0x2c
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08b      	sub	sp, #44	; 0x2c
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	2414      	movs	r4, #20
 8000756:	193b      	adds	r3, r7, r4
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f001 fefa 	bl	8002558 <memset>
  if(huart->Instance==USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <HAL_UART_MspInit+0x90>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d132      	bne.n	80007d4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_UART_MspInit+0x94>)
 8000770:	69da      	ldr	r2, [r3, #28]
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_UART_MspInit+0x94>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0289      	lsls	r1, r1, #10
 8000778:	430a      	orrs	r2, r1
 800077a:	61da      	str	r2, [r3, #28]
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_UART_MspInit+0x94>)
 800077e:	69da      	ldr	r2, [r3, #28]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_UART_MspInit+0x94>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_UART_MspInit+0x94>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0289      	lsls	r1, r1, #10
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_MspInit+0x94>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	029b      	lsls	r3, r3, #10
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_UART_MspInit+0x98>)
 80007ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2202      	movs	r2, #2
 80007b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2203      	movs	r2, #3
 80007be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f9ec 	bl	8000bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b00b      	add	sp, #44	; 0x2c
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	00008004 	.word	0x00008004

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8b0 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fb4c 	bl	8000eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	f000 fb44 	bl	8000eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <TIM2_IRQHandler+0x14>)
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f8fe 	bl	8001a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000028 	.word	0x20000028

08000850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000862:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000864:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <LoopForever+0xa>)
    CMP R1, R2
 8000868:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800086a:	d105      	bne.n	8000878 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800086e:	4913      	ldr	r1, [pc, #76]	; (80008bc <LoopForever+0x12>)
    STR R1, [R0]
 8000870:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000874:	4913      	ldr	r1, [pc, #76]	; (80008c4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000876:	6001      	str	r1, [r0, #0]

08000878 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800087a:	4914      	ldr	r1, [pc, #80]	; (80008cc <LoopForever+0x22>)
  ldr r2, =_sidata
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <LoopForever+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000890:	4c11      	ldr	r4, [pc, #68]	; (80008d8 <LoopForever+0x2e>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800089e:	f7ff ffd7 	bl	8000850 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008a2:	f001 fe35 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fccb 	bl	8000240 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80008b0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008b4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80008b8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80008bc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008c0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008c4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d0:	080025c0 	.word	0x080025c0
  ldr r2, =_sbss
 80008d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d8:	20000100 	.word	0x20000100

080008dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_IRQHandler>
	...

080008e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_Init+0x24>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_Init+0x24>)
 80008ea:	2110      	movs	r1, #16
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 f809 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff feb3 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_InitTick+0x5c>)
 8000912:	681c      	ldr	r4, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	0019      	movs	r1, r3
 800091a:	23fa      	movs	r3, #250	; 0xfa
 800091c:	0098      	lsls	r0, r3, #2
 800091e:	f7ff fbf3 	bl	8000108 <__udivsi3>
 8000922:	0003      	movs	r3, r0
 8000924:	0019      	movs	r1, r3
 8000926:	0020      	movs	r0, r4
 8000928:	f7ff fbee 	bl	8000108 <__udivsi3>
 800092c:	0003      	movs	r3, r0
 800092e:	0018      	movs	r0, r3
 8000930:	f000 f92f 	bl	8000b92 <HAL_SYSTICK_Config>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e00f      	b.n	800095c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d80b      	bhi.n	800095a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f8fc 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_InitTick+0x64>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_IncTick+0x20>)
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000008 	.word	0x20000008
 8000990:	200000fc 	.word	0x200000fc

08000994 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	200000fc 	.word	0x200000fc

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff fff0 	bl	8000994 <HAL_GetTick>
 80009b4:	0003      	movs	r3, r0
 80009b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	001a      	movs	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	189b      	adds	r3, r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	f7ff ffe0 	bl	8000994 <HAL_GetTick>
 80009d4:	0002      	movs	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d809      	bhi.n	8000a18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_EnableIRQ+0x30>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	4091      	lsls	r1, r2
 8000a14:	000a      	movs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
  }
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b7f      	cmp	r3, #127	; 0x7f
 8000a38:	d828      	bhi.n	8000a8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	33c0      	adds	r3, #192	; 0xc0
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	589b      	ldr	r3, [r3, r2]
 8000a4a:	1dfa      	adds	r2, r7, #7
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	2203      	movs	r2, #3
 8000a52:	400a      	ands	r2, r1
 8000a54:	00d2      	lsls	r2, r2, #3
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	401a      	ands	r2, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2303      	movs	r3, #3
 8000a72:	4003      	ands	r3, r0
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	481f      	ldr	r0, [pc, #124]	; (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	430a      	orrs	r2, r1
 8000a84:	33c0      	adds	r3, #192	; 0xc0
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a8a:	e031      	b.n	8000af0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <__NVIC_SetPriority+0xd8>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0019      	movs	r1, r3
 8000a94:	230f      	movs	r3, #15
 8000a96:	400b      	ands	r3, r1
 8000a98:	3b08      	subs	r3, #8
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	3306      	adds	r3, #6
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	18d3      	adds	r3, r2, r3
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <__NVIC_SetPriority+0xd8>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001c      	movs	r4, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	4023      	ands	r3, r4
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	3306      	adds	r3, #6
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	18c3      	adds	r3, r0, r3
 8000aec:	3304      	adds	r3, #4
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b003      	add	sp, #12
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	045b      	lsls	r3, r3, #17
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d301      	bcc.n	8000b18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b14:	2301      	movs	r3, #1
 8000b16:	e010      	b.n	8000b3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <SysTick_Config+0x44>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2103      	movs	r1, #3
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff7c 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x44>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	210f      	movs	r1, #15
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	1c02      	adds	r2, r0, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	0002      	movs	r2, r0
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ff33 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ffaf 	bl	8000b00 <SysTick_Config>
 8000ba2:	0003      	movs	r3, r0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	e149      	b.n	8000e50 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <HAL_GPIO_Init+0x28>
 8000bd2:	e13a      	b.n	8000e4a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d005      	beq.n	8000bec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2203      	movs	r2, #3
 8000be6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d130      	bne.n	8000c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2203      	movs	r2, #3
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d017      	beq.n	8000c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d123      	bne.n	8000cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	58d3      	ldr	r3, [r2, r3]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	4013      	ands	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2107      	movs	r1, #7
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	6939      	ldr	r1, [r7, #16]
 8000cdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	23c0      	movs	r3, #192	; 0xc0
 8000d18:	029b      	lsls	r3, r3, #10
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d100      	bne.n	8000d20 <HAL_GPIO_Init+0x174>
 8000d1e:	e094      	b.n	8000e4a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4013      	ands	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d38:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <HAL_GPIO_Init+0x2c0>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	589b      	ldr	r3, [r3, r2]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	43da      	mvns	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	2390      	movs	r3, #144	; 0x90
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1d6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a41      	ldr	r2, [pc, #260]	; (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1d2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a40      	ldr	r2, [pc, #256]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1ce>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x1d8>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x1d8>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x1d8>
 8000d82:	2300      	movs	r3, #0
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	2103      	movs	r1, #3
 8000d88:	400a      	ands	r2, r1
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d94:	4935      	ldr	r1, [pc, #212]	; (8000e6c <HAL_GPIO_Init+0x2c0>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	029b      	lsls	r3, r3, #10
 8000de4:	4013      	ands	r3, r2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	035b      	lsls	r3, r3, #13
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	039b      	lsls	r3, r3, #14
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	40da      	lsrs	r2, r3
 8000e58:	1e13      	subs	r3, r2, #0
 8000e5a:	d000      	beq.n	8000e5e <HAL_GPIO_Init+0x2b2>
 8000e5c:	e6ae      	b.n	8000bbc <HAL_GPIO_Init+0x10>
  } 
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b006      	add	sp, #24
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000
 8000e70:	48000400 	.word	0x48000400
 8000e74:	48000800 	.word	0x48000800
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	000a      	movs	r2, r1
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	1cba      	adds	r2, r7, #2
 8000e90:	8812      	ldrh	r2, [r2, #0]
 8000e92:	4013      	ands	r3, r2
 8000e94:	d004      	beq.n	8000ea0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e003      	b.n	8000ea8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	781b      	ldrb	r3, [r3, #0]
  }
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dbb      	adds	r3, r7, #6
 8000ec2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	1dba      	adds	r2, r7, #6
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d008      	beq.n	8000ee2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ed2:	1dba      	adds	r2, r7, #6
 8000ed4:	8812      	ldrh	r2, [r2, #0]
 8000ed6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fb17 	bl	8000510 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f000 fb76 	bl	80015f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x20>
 8000f0e:	e08e      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f10:	4bc5      	ldr	r3, [pc, #788]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	220c      	movs	r2, #12
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d00e      	beq.n	8000f3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1c:	4bc2      	ldr	r3, [pc, #776]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d117      	bne.n	8000f58 <HAL_RCC_OscConfig+0x68>
 8000f28:	4bbf      	ldr	r3, [pc, #764]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	025b      	lsls	r3, r3, #9
 8000f30:	401a      	ands	r2, r3
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10e      	bne.n	8000f58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4bbb      	ldr	r3, [pc, #748]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x58>
 8000f46:	e071      	b.n	800102c <HAL_RCC_OscConfig+0x13c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d000      	beq.n	8000f52 <HAL_RCC_OscConfig+0x62>
 8000f50:	e06c      	b.n	800102c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f000 fb4c 	bl	80015f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x80>
 8000f60:	4bb1      	ldr	r3, [pc, #708]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4bb0      	ldr	r3, [pc, #704]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e02f      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0xa2>
 8000f78:	4bab      	ldr	r3, [pc, #684]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4baa      	ldr	r3, [pc, #680]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	49ab      	ldr	r1, [pc, #684]	; (800122c <HAL_RCC_OscConfig+0x33c>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4ba8      	ldr	r3, [pc, #672]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4ba7      	ldr	r3, [pc, #668]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <HAL_RCC_OscConfig+0x340>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e01e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xc8>
 8000f9a:	4ba3      	ldr	r3, [pc, #652]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	02c9      	lsls	r1, r1, #11
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b9e      	ldr	r3, [pc, #632]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000fb8:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b9a      	ldr	r3, [pc, #616]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	499b      	ldr	r1, [pc, #620]	; (800122c <HAL_RCC_OscConfig+0x33c>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4b98      	ldr	r3, [pc, #608]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b97      	ldr	r3, [pc, #604]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fca:	4999      	ldr	r1, [pc, #612]	; (8001230 <HAL_RCC_OscConfig+0x340>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fcdc 	bl	8000994 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fcd7 	bl	8000994 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e2fd      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	4b8c      	ldr	r3, [pc, #560]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0xf2>
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fcc7 	bl	8000994 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fcc2 	bl	8000994 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e2e8      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x11c>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x14a>
 8001038:	e06c      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	220c      	movs	r2, #12
 8001040:	4013      	ands	r3, r2
 8001042:	d00e      	beq.n	8001062 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b08      	cmp	r3, #8
 800104e:	d11f      	bne.n	8001090 <HAL_RCC_OscConfig+0x1a0>
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	23c0      	movs	r3, #192	; 0xc0
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	401a      	ands	r2, r3
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	429a      	cmp	r2, r3
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x188>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d001      	beq.n	8001078 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e2bb      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22f8      	movs	r2, #248	; 0xf8
 800107e:	4393      	bics	r3, r2
 8001080:	0019      	movs	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	00da      	lsls	r2, r3, #3
 8001088:	4b67      	ldr	r3, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e041      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d024      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc76 	bl	8000994 <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc71 	bl	8000994 <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e297      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	d0f1      	beq.n	80010ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	22f8      	movs	r2, #248	; 0xf8
 80010d0:	4393      	bics	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00da      	lsls	r2, r3, #3
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	438a      	bics	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fc51 	bl	8000994 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc4c 	bl	8000994 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e272      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d1f1      	bne.n	80010f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2208      	movs	r2, #8
 800111a:	4013      	ands	r3, r2
 800111c:	d036      	beq.n	800118c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fc2f 	bl	8000994 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc2a 	bl	8000994 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e250      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d0f1      	beq.n	800113c <HAL_RCC_OscConfig+0x24c>
 8001158:	e018      	b.n	800118c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fc15 	bl	8000994 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc10 	bl	8000994 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e236      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d1f1      	bne.n	8001170 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2204      	movs	r2, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_RCC_OscConfig+0x2a8>
 8001196:	e0b5      	b.n	8001304 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001198:	201f      	movs	r0, #31
 800119a:	183b      	adds	r3, r7, r0
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	4013      	ands	r3, r2
 80011aa:	d110      	bne.n	80011ce <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	0549      	lsls	r1, r1, #21
 80011b6:	430a      	orrs	r2, r1
 80011b8:	61da      	str	r2, [r3, #28]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	055b      	lsls	r3, r3, #21
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c8:	183b      	adds	r3, r7, r0
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4013      	ands	r3, r2
 80011d8:	d11a      	bne.n	8001210 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0049      	lsls	r1, r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e8:	f7ff fbd4 	bl	8000994 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fbcf 	bl	8000994 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1f5      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4013      	ands	r3, r2
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10f      	bne.n	8001238 <HAL_RCC_OscConfig+0x348>
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800121a:	6a1a      	ldr	r2, [r3, #32]
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	e036      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40021000 	.word	0x40021000
 800122c:	fffeffff 	.word	0xfffeffff
 8001230:	fffbffff 	.word	0xfffbffff
 8001234:	40007000 	.word	0x40007000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x36a>
 8001240:	4bca      	ldr	r3, [pc, #808]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	4bc9      	ldr	r3, [pc, #804]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	621a      	str	r2, [r3, #32]
 800124c:	4bc7      	ldr	r3, [pc, #796]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800124e:	6a1a      	ldr	r2, [r3, #32]
 8001250:	4bc6      	ldr	r3, [pc, #792]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001252:	2104      	movs	r1, #4
 8001254:	438a      	bics	r2, r1
 8001256:	621a      	str	r2, [r3, #32]
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x38c>
 8001262:	4bc2      	ldr	r3, [pc, #776]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	4bc1      	ldr	r3, [pc, #772]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001268:	2104      	movs	r1, #4
 800126a:	430a      	orrs	r2, r1
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	4bbf      	ldr	r3, [pc, #764]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001270:	6a1a      	ldr	r2, [r3, #32]
 8001272:	4bbe      	ldr	r3, [pc, #760]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 800127c:	4bbb      	ldr	r3, [pc, #748]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800127e:	6a1a      	ldr	r2, [r3, #32]
 8001280:	4bba      	ldr	r3, [pc, #744]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	621a      	str	r2, [r3, #32]
 8001288:	4bb8      	ldr	r3, [pc, #736]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	4bb7      	ldr	r3, [pc, #732]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800128e:	2104      	movs	r1, #4
 8001290:	438a      	bics	r2, r1
 8001292:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fb7a 	bl	8000994 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	e009      	b.n	80012ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb75 	bl	8000994 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4aaf      	ldr	r2, [pc, #700]	; (8001570 <HAL_RCC_OscConfig+0x680>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e19a      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	4bac      	ldr	r3, [pc, #688]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3b6>
 80012c4:	e013      	b.n	80012ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fb65 	bl	8000994 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ce:	e009      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb60 	bl	8000994 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	4aa5      	ldr	r2, [pc, #660]	; (8001570 <HAL_RCC_OscConfig+0x680>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e185      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4ba1      	ldr	r3, [pc, #644]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ee:	231f      	movs	r3, #31
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	4b9c      	ldr	r3, [pc, #624]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012fa:	69da      	ldr	r2, [r3, #28]
 80012fc:	4b9b      	ldr	r3, [pc, #620]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012fe:	499d      	ldr	r1, [pc, #628]	; (8001574 <HAL_RCC_OscConfig+0x684>)
 8001300:	400a      	ands	r2, r1
 8001302:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2210      	movs	r2, #16
 800130a:	4013      	ands	r3, r2
 800130c:	d063      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12a      	bne.n	800136c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001316:	4b95      	ldr	r3, [pc, #596]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b94      	ldr	r3, [pc, #592]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800131c:	2104      	movs	r1, #4
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001322:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001326:	4b91      	ldr	r3, [pc, #580]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fb31 	bl	8000994 <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001338:	f7ff fb2c 	bl	8000994 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e152      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d0f1      	beq.n	8001338 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001354:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	22f8      	movs	r2, #248	; 0xf8
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
 800136a:	e034      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	3305      	adds	r3, #5
 8001372:	d111      	bne.n	8001398 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001374:	4b7d      	ldr	r3, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	4b7c      	ldr	r3, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800137a:	2104      	movs	r1, #4
 800137c:	438a      	bics	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001380:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	22f8      	movs	r2, #248	; 0xf8
 8001386:	4393      	bics	r3, r2
 8001388:	0019      	movs	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	00da      	lsls	r2, r3, #3
 8001390:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	e01e      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001398:	4b74      	ldr	r3, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800139e:	2104      	movs	r1, #4
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a8:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff faf0 	bl	8000994 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ba:	f7ff faeb 	bl	8000994 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e111      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2220      	movs	r2, #32
 80013dc:	4013      	ands	r3, r2
 80013de:	d05c      	beq.n	800149a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013e0:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d00e      	beq.n	800140a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013ec:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d114      	bne.n	8001422 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013f8:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	401a      	ands	r2, r3
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	429a      	cmp	r2, r3
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	d040      	beq.n	8001498 <HAL_RCC_OscConfig+0x5a8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d03c      	beq.n	8001498 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e6      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01b      	beq.n	8001462 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0249      	lsls	r1, r1, #9
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff faac 	bl	8000994 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001442:	f7ff faa7 	bl	8000994 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0cd      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001454:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	4013      	ands	r3, r2
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x552>
 8001460:	e01b      	b.n	800149a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001468:	4943      	ldr	r1, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x688>)
 800146a:	400a      	ands	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa91 	bl	8000994 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001478:	f7ff fa8c 	bl	8000994 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b2      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x588>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001498:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d100      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5b4>
 80014a2:	e0a4      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5c2>
 80014b0:	e078      	b.n	80015a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d14c      	bne.n	8001554 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014c0:	492e      	ldr	r1, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x68c>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa65 	bl	8000994 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa60 	bl	8000994 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e086      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	220f      	movs	r2, #15
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x690>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	431a      	orrs	r2, r3
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0449      	lsls	r1, r1, #17
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fa33 	bl	8000994 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fa2e 	bl	8000994 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e054      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	049b      	lsls	r3, r3, #18
 800154e:	4013      	ands	r3, r2
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x644>
 8001552:	e04c      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x68c>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fa18 	bl	8000994 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x6a6>
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40021000 	.word	0x40021000
 8001570:	00001388 	.word	0x00001388
 8001574:	efffffff 	.word	0xefffffff
 8001578:	fffeffff 	.word	0xfffeffff
 800157c:	feffffff 	.word	0xfeffffff
 8001580:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fa06 	bl	8000994 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e02c      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	049b      	lsls	r3, r3, #18
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x694>
 80015a2:	e024      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e01f      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10e      	bne.n	80015ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	220f      	movs	r2, #15
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	23f0      	movs	r3, #240	; 0xf0
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b008      	add	sp, #32
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0bf      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d911      	bls.n	8001642 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0a6      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d015      	beq.n	8001678 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d006      	beq.n	8001664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800165c:	21e0      	movs	r1, #224	; 0xe0
 800165e:	00c9      	lsls	r1, r1, #3
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	22f0      	movs	r2, #240	; 0xf0
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d04c      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d120      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07a      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	049b      	lsls	r3, r3, #18
 80016aa:	4013      	ands	r3, r2
 80016ac:	d114      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06e      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	4013      	ands	r3, r2
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e062      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e05b      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f952 	bl	8000994 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f4:	e009      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7ff f94d 	bl	8000994 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_RCC_ClockConfig+0x1a4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e042      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	220c      	movs	r2, #12
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1ec      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d211      	bcs.n	800174e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	4393      	bics	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e020      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_RCC_ClockConfig+0x1a8>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800176c:	f000 f820 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8001770:	0001      	movs	r1, r0
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	220f      	movs	r2, #15
 800177a:	4013      	ands	r3, r2
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x1ac>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	000a      	movs	r2, r1
 8001782:	40da      	lsrs	r2, r3
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1b0>)
 8001786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff f8bd 	bl	8000908 <HAL_InitTick>
  
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	00001388 	.word	0x00001388
 80017a4:	fffff8ff 	.word	0xfffff8ff
 80017a8:	080025a0 	.word	0x080025a0
 80017ac:	20000000 	.word	0x20000000

080017b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08f      	sub	sp, #60	; 0x3c
 80017b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017b6:	2314      	movs	r3, #20
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	4a38      	ldr	r2, [pc, #224]	; (800189c <HAL_RCC_GetSysClockFreq+0xec>)
 80017bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017be:	c313      	stmia	r3!, {r0, r1, r4}
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ca:	c313      	stmia	r3!, {r0, r1, r4}
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d047      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0xd4>
 80017f4:	d849      	bhi.n	800188a <HAL_RCC_GetSysClockFreq+0xda>
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x50>
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x56>
 80017fe:	e044      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001804:	e044      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	220f      	movs	r2, #15
 800180c:	4013      	ands	r3, r2
 800180e:	2214      	movs	r2, #20
 8001810:	18ba      	adds	r2, r7, r2
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	220f      	movs	r2, #15
 800181c:	4013      	ands	r3, r2
 800181e:	1d3a      	adds	r2, r7, #4
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001826:	23c0      	movs	r3, #192	; 0xc0
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	401a      	ands	r2, r3
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	429a      	cmp	r2, r3
 8001832:	d109      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001836:	481c      	ldr	r0, [pc, #112]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001838:	f7fe fc66 	bl	8000108 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	001a      	movs	r2, r3
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	4353      	muls	r3, r2
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
 8001846:	e01a      	b.n	800187e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	23c0      	movs	r3, #192	; 0xc0
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	401a      	ands	r2, r3
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	429a      	cmp	r2, r3
 8001856:	d109      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800185c:	f7fe fc54 	bl	8000108 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	001a      	movs	r2, r3
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	4353      	muls	r3, r2
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	e008      	b.n	800187e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800186c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001870:	f7fe fc4a 	bl	8000108 <__udivsi3>
 8001874:	0003      	movs	r3, r0
 8001876:	001a      	movs	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	4353      	muls	r3, r2
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001882:	e005      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001888:	e002      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b00f      	add	sp, #60	; 0x3c
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	08002580 	.word	0x08002580
 80018a0:	08002590 	.word	0x08002590
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	02dc6c00 	.word	0x02dc6c00

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	0001      	movs	r1, r0
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	2207      	movs	r2, #7
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	000b      	movs	r3, r1
}    
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40021000 	.word	0x40021000
 80018ec:	080025b0 	.word	0x080025b0

080018f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e090      	b.n	8001a26 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	223d      	movs	r2, #61	; 0x3d
 8001908:	5c9b      	ldrb	r3, [r3, r2]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	223c      	movs	r2, #60	; 0x3c
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f7fe fec4 	bl	80006a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	223d      	movs	r2, #61	; 0x3d
 8001924:	2102      	movs	r1, #2
 8001926:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	493f      	ldr	r1, [pc, #252]	; (8001a30 <HAL_TIM_Encoder_Init+0x140>)
 8001934:	400a      	ands	r2, r1
 8001936:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	0019      	movs	r1, r3
 8001942:	0010      	movs	r0, r2
 8001944:	f000 f9b2 	bl	8001cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_TIM_Encoder_Init+0x144>)
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4313      	orrs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_TIM_Encoder_Init+0x148>)
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <HAL_TIM_Encoder_Init+0x14c>)
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	4313      	orrs	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	011a      	lsls	r2, r3, #4
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	031b      	lsls	r3, r3, #12
 80019b2:	4313      	orrs	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2222      	movs	r2, #34	; 0x22
 80019be:	4393      	bics	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2288      	movs	r2, #136	; 0x88
 80019c6:	4393      	bics	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4313      	orrs	r3, r2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2246      	movs	r2, #70	; 0x46
 80019f8:	2101      	movs	r1, #1
 80019fa:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	223e      	movs	r2, #62	; 0x3e
 8001a00:	2101      	movs	r1, #1
 8001a02:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	223f      	movs	r2, #63	; 0x3f
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2242      	movs	r2, #66	; 0x42
 8001a10:	2101      	movs	r1, #1
 8001a12:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2243      	movs	r2, #67	; 0x43
 8001a18:	2101      	movs	r1, #1
 8001a1a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	223d      	movs	r2, #61	; 0x3d
 8001a20:	2101      	movs	r1, #1
 8001a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b006      	add	sp, #24
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	ffffbff8 	.word	0xffffbff8
 8001a34:	fffffcfc 	.word	0xfffffcfc
 8001a38:	fffff3f3 	.word	0xfffff3f3
 8001a3c:	ffff0f0f 	.word	0xffff0f0f

08001a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d124      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d11d      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4252      	negs	r2, r2
 8001a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7fe fbcc 	bl	8000220 <HAL_TIM_IC_CaptureCallback>
 8001a88:	e007      	b.n	8001a9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 f8f5 	bl	8001c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 f8f9 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d125      	bne.n	8001afa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d11e      	bne.n	8001afa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7fe fb9f 	bl	8000220 <HAL_TIM_IC_CaptureCallback>
 8001ae2:	e007      	b.n	8001af4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f8c8 	bl	8001c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f8cc 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2208      	movs	r2, #8
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d124      	bne.n	8001b52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11d      	bne.n	8001b52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	4252      	negs	r2, r2
 8001b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fb73 	bl	8000220 <HAL_TIM_IC_CaptureCallback>
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f89c 	bl	8001c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f8a0 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d125      	bne.n	8001bac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2210      	movs	r2, #16
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d11e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2211      	movs	r2, #17
 8001b74:	4252      	negs	r2, r2
 8001b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7fe fb46 	bl	8000220 <HAL_TIM_IC_CaptureCallback>
 8001b94:	e007      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 f86f 	bl	8001c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f873 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10f      	bne.n	8001bda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4252      	negs	r2, r2
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f849 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d10f      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d108      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2281      	movs	r2, #129	; 0x81
 8001bfc:	4252      	negs	r2, r2
 8001bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f928 	bl	8001e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d10f      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d108      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	4252      	negs	r2, r2
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f833 	bl	8001c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d10f      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d108      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2221      	movs	r2, #33	; 0x21
 8001c58:	4252      	negs	r2, r2
 8001c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f8f2 	bl	8001e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <TIM_Base_SetConfig+0xd4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d008      	beq.n	8001cd6 <TIM_Base_SetConfig+0x2a>
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0x2a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <TIM_Base_SetConfig+0xd8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2270      	movs	r2, #112	; 0x70
 8001cda:	4393      	bics	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <TIM_Base_SetConfig+0xd4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d014      	beq.n	8001d1a <TIM_Base_SetConfig+0x6e>
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d00f      	beq.n	8001d1a <TIM_Base_SetConfig+0x6e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <TIM_Base_SetConfig+0xd8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00b      	beq.n	8001d1a <TIM_Base_SetConfig+0x6e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <TIM_Base_SetConfig+0xdc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <TIM_Base_SetConfig+0x6e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <TIM_Base_SetConfig+0xe0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d003      	beq.n	8001d1a <TIM_Base_SetConfig+0x6e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <TIM_Base_SetConfig+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d108      	bne.n	8001d2c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <TIM_Base_SetConfig+0xe8>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	4393      	bics	r3, r2
 8001d32:	001a      	movs	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <TIM_Base_SetConfig+0xd4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0xbe>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <TIM_Base_SetConfig+0xe0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0xbe>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <TIM_Base_SetConfig+0xe4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d103      	bne.n	8001d72 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	615a      	str	r2, [r3, #20]
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40002000 	.word	0x40002000
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40014800 	.word	0x40014800
 8001d94:	fffffcff 	.word	0xfffffcff

08001d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	223c      	movs	r2, #60	; 0x3c
 8001da6:	5c9b      	ldrb	r3, [r3, r2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e042      	b.n	8001e36 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	223c      	movs	r2, #60	; 0x3c
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	223d      	movs	r2, #61	; 0x3d
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2270      	movs	r2, #112	; 0x70
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00a      	beq.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	05db      	lsls	r3, r3, #23
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d004      	beq.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10c      	bne.n	8001e24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	4393      	bics	r3, r2
 8001e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	223d      	movs	r2, #61	; 0x3d
 8001e28:	2101      	movs	r1, #1
 8001e2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	223c      	movs	r2, #60	; 0x3c
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400

08001e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e044      	b.n	8001f04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2274      	movs	r2, #116	; 0x74
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7fe fc5d 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2224      	movs	r2, #36	; 0x24
 8001e96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f000 f830 	bl	8001f10 <UART_SetConfig>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e024      	b.n	8001f04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f963 	bl	8002190 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	490d      	ldr	r1, [pc, #52]	; (8001f0c <HAL_UART_Init+0xa4>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	212a      	movs	r1, #42	; 0x2a
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f000 f9fb 	bl	80022f8 <UART_CheckIdleState>
 8001f02:	0003      	movs	r3, r0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	ffffb7ff 	.word	0xffffb7ff

08001f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f18:	231e      	movs	r3, #30
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <UART_SetConfig+0x264>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a88      	ldr	r2, [pc, #544]	; (8002178 <UART_SetConfig+0x268>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a7f      	ldr	r2, [pc, #508]	; (800217c <UART_SetConfig+0x26c>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a7b      	ldr	r2, [pc, #492]	; (8002180 <UART_SetConfig+0x270>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d127      	bne.n	8001fe6 <UART_SetConfig+0xd6>
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <UART_SetConfig+0x274>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d00d      	beq.n	8001fbe <UART_SetConfig+0xae>
 8001fa2:	d81b      	bhi.n	8001fdc <UART_SetConfig+0xcc>
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d014      	beq.n	8001fd2 <UART_SetConfig+0xc2>
 8001fa8:	d818      	bhi.n	8001fdc <UART_SetConfig+0xcc>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <UART_SetConfig+0xa4>
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d00a      	beq.n	8001fc8 <UART_SetConfig+0xb8>
 8001fb2:	e013      	b.n	8001fdc <UART_SetConfig+0xcc>
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e021      	b.n	8002002 <UART_SetConfig+0xf2>
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e01c      	b.n	8002002 <UART_SetConfig+0xf2>
 8001fc8:	231f      	movs	r3, #31
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2204      	movs	r2, #4
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e017      	b.n	8002002 <UART_SetConfig+0xf2>
 8001fd2:	231f      	movs	r3, #31
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e012      	b.n	8002002 <UART_SetConfig+0xf2>
 8001fdc:	231f      	movs	r3, #31
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e00d      	b.n	8002002 <UART_SetConfig+0xf2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a67      	ldr	r2, [pc, #412]	; (8002188 <UART_SetConfig+0x278>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d104      	bne.n	8001ffa <UART_SetConfig+0xea>
 8001ff0:	231f      	movs	r3, #31
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e003      	b.n	8002002 <UART_SetConfig+0xf2>
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2210      	movs	r2, #16
 8002000:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	429a      	cmp	r2, r3
 800200c:	d15d      	bne.n	80020ca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800200e:	231f      	movs	r3, #31
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d015      	beq.n	8002044 <UART_SetConfig+0x134>
 8002018:	dc18      	bgt.n	800204c <UART_SetConfig+0x13c>
 800201a:	2b04      	cmp	r3, #4
 800201c:	d00d      	beq.n	800203a <UART_SetConfig+0x12a>
 800201e:	dc15      	bgt.n	800204c <UART_SetConfig+0x13c>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <UART_SetConfig+0x11a>
 8002024:	2b02      	cmp	r3, #2
 8002026:	d005      	beq.n	8002034 <UART_SetConfig+0x124>
 8002028:	e010      	b.n	800204c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800202a:	f7ff fc4b 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 800202e:	0003      	movs	r3, r0
 8002030:	61bb      	str	r3, [r7, #24]
        break;
 8002032:	e012      	b.n	800205a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <UART_SetConfig+0x27c>)
 8002036:	61bb      	str	r3, [r7, #24]
        break;
 8002038:	e00f      	b.n	800205a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800203a:	f7ff fbb9 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
        break;
 8002042:	e00a      	b.n	800205a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	61bb      	str	r3, [r7, #24]
        break;
 800204a:	e006      	b.n	800205a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002050:	231e      	movs	r3, #30
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
        break;
 8002058:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <UART_SetConfig+0x152>
 8002060:	e07b      	b.n	800215a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	18d2      	adds	r2, r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f7fe f847 	bl	8000108 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0f      	cmp	r3, #15
 8002084:	d91c      	bls.n	80020c0 <UART_SetConfig+0x1b0>
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	429a      	cmp	r2, r3
 800208e:	d217      	bcs.n	80020c0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	b29a      	uxth	r2, r3
 8002094:	200e      	movs	r0, #14
 8002096:	183b      	adds	r3, r7, r0
 8002098:	210f      	movs	r1, #15
 800209a:	438a      	bics	r2, r1
 800209c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2207      	movs	r2, #7
 80020a6:	4013      	ands	r3, r2
 80020a8:	b299      	uxth	r1, r3
 80020aa:	183b      	adds	r3, r7, r0
 80020ac:	183a      	adds	r2, r7, r0
 80020ae:	8812      	ldrh	r2, [r2, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	183a      	adds	r2, r7, r0
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e04c      	b.n	800215a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80020c0:	231e      	movs	r3, #30
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e047      	b.n	800215a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020ca:	231f      	movs	r3, #31
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d015      	beq.n	8002100 <UART_SetConfig+0x1f0>
 80020d4:	dc18      	bgt.n	8002108 <UART_SetConfig+0x1f8>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d00d      	beq.n	80020f6 <UART_SetConfig+0x1e6>
 80020da:	dc15      	bgt.n	8002108 <UART_SetConfig+0x1f8>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <UART_SetConfig+0x1d6>
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d005      	beq.n	80020f0 <UART_SetConfig+0x1e0>
 80020e4:	e010      	b.n	8002108 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020e6:	f7ff fbed 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]
        break;
 80020ee:	e012      	b.n	8002116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <UART_SetConfig+0x27c>)
 80020f2:	61bb      	str	r3, [r7, #24]
        break;
 80020f4:	e00f      	b.n	8002116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020f6:	f7ff fb5b 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 80020fa:	0003      	movs	r3, r0
 80020fc:	61bb      	str	r3, [r7, #24]
        break;
 80020fe:	e00a      	b.n	8002116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	61bb      	str	r3, [r7, #24]
        break;
 8002106:	e006      	b.n	8002116 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800210c:	231e      	movs	r3, #30
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
        break;
 8002114:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01e      	beq.n	800215a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	085a      	lsrs	r2, r3, #1
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	18d2      	adds	r2, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0019      	movs	r1, r3
 800212c:	0010      	movs	r0, r2
 800212e:	f7fd ffeb 	bl	8000108 <__udivsi3>
 8002132:	0003      	movs	r3, r0
 8002134:	b29b      	uxth	r3, r3
 8002136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	d909      	bls.n	8002152 <UART_SetConfig+0x242>
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	025b      	lsls	r3, r3, #9
 8002144:	429a      	cmp	r2, r3
 8002146:	d204      	bcs.n	8002152 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	e003      	b.n	800215a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002152:	231e      	movs	r3, #30
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002166:	231e      	movs	r3, #30
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b008      	add	sp, #32
 8002172:	bd80      	pop	{r7, pc}
 8002174:	efff69f3 	.word	0xefff69f3
 8002178:	ffffcfff 	.word	0xffffcfff
 800217c:	fffff4ff 	.word	0xfffff4ff
 8002180:	40013800 	.word	0x40013800
 8002184:	40021000 	.word	0x40021000
 8002188:	40004400 	.word	0x40004400
 800218c:	007a1200 	.word	0x007a1200

08002190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d00b      	beq.n	80021ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <UART_AdvFeatureConfig+0x144>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d00b      	beq.n	80021dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <UART_AdvFeatureConfig+0x148>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00b      	beq.n	80021fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <UART_AdvFeatureConfig+0x14c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2208      	movs	r2, #8
 8002204:	4013      	ands	r3, r2
 8002206:	d00b      	beq.n	8002220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <UART_AdvFeatureConfig+0x150>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	d00b      	beq.n	8002242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <UART_AdvFeatureConfig+0x154>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d00b      	beq.n	8002264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <UART_AdvFeatureConfig+0x158>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	4013      	ands	r3, r2
 800226c:	d01d      	beq.n	80022aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <UART_AdvFeatureConfig+0x15c>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	035b      	lsls	r3, r3, #13
 800228e:	429a      	cmp	r2, r3
 8002290:	d10b      	bne.n	80022aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <UART_AdvFeatureConfig+0x160>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00b      	beq.n	80022cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <UART_AdvFeatureConfig+0x164>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
  }
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	fffdffff 	.word	0xfffdffff
 80022d8:	fffeffff 	.word	0xfffeffff
 80022dc:	fffbffff 	.word	0xfffbffff
 80022e0:	ffff7fff 	.word	0xffff7fff
 80022e4:	ffffefff 	.word	0xffffefff
 80022e8:	ffffdfff 	.word	0xffffdfff
 80022ec:	ffefffff 	.word	0xffefffff
 80022f0:	ff9fffff 	.word	0xff9fffff
 80022f4:	fff7ffff 	.word	0xfff7ffff

080022f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	2100      	movs	r1, #0
 8002306:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002308:	f7fe fb44 	bl	8000994 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2208      	movs	r2, #8
 8002318:	4013      	ands	r3, r2
 800231a:	2b08      	cmp	r3, #8
 800231c:	d10c      	bne.n	8002338 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	0391      	lsls	r1, r2, #14
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <UART_CheckIdleState+0x8c>)
 8002328:	9200      	str	r2, [sp, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	f000 f82c 	bl	8002388 <UART_WaitOnFlagUntilTimeout>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d001      	beq.n	8002338 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e021      	b.n	800237c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	2b04      	cmp	r3, #4
 8002344:	d10c      	bne.n	8002360 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	03d1      	lsls	r1, r2, #15
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <UART_CheckIdleState+0x8c>)
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	f000 f818 	bl	8002388 <UART_WaitOnFlagUntilTimeout>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e00d      	b.n	800237c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2274      	movs	r2, #116	; 0x74
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}
 8002384:	01ffffff 	.word	0x01ffffff

08002388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b094      	sub	sp, #80	; 0x50
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002398:	e0a3      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239c:	3301      	adds	r3, #1
 800239e:	d100      	bne.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80023a0:	e09f      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7fe faf7 	bl	8000994 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13d      	bne.n	8002434 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b8:	f3ef 8310 	mrs	r3, PRIMASK
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023c0:	647b      	str	r3, [r7, #68]	; 0x44
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	494c      	ldr	r1, [pc, #304]	; (800250c <UART_WaitOnFlagUntilTimeout+0x184>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	f383 8810 	msr	PRIMASK, r3
}
 80023e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ea:	f3ef 8310 	mrs	r3, PRIMASK
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
 80023f4:	2301      	movs	r3, #1
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	f383 8810 	msr	PRIMASK, r3
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	438a      	bics	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	f383 8810 	msr	PRIMASK, r3
}
 800241a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2274      	movs	r2, #116	; 0x74
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e067      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2204      	movs	r2, #4
 800243c:	4013      	ands	r3, r2
 800243e:	d050      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	401a      	ands	r2, r3
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	429a      	cmp	r2, r3
 8002452:	d146      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245e:	f3ef 8310 	mrs	r3, PRIMASK
 8002462:	613b      	str	r3, [r7, #16]
  return(result);
 8002464:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f383 8810 	msr	PRIMASK, r3
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4923      	ldr	r1, [pc, #140]	; (800250c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002486:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f383 8810 	msr	PRIMASK, r3
}
 800248e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002490:	f3ef 8310 	mrs	r3, PRIMASK
 8002494:	61fb      	str	r3, [r7, #28]
  return(result);
 8002496:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002498:	64bb      	str	r3, [r7, #72]	; 0x48
 800249a:	2301      	movs	r3, #1
 800249c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f383 8810 	msr	PRIMASK, r3
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	438a      	bics	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f383 8810 	msr	PRIMASK, r3
}
 80024c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	2120      	movs	r1, #32
 80024d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2274      	movs	r2, #116	; 0x74
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e010      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	425a      	negs	r2, r3
 80024f2:	4153      	adcs	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	001a      	movs	r2, r3
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d100      	bne.n	8002502 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002500:	e74b      	b.n	800239a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b014      	add	sp, #80	; 0x50
 800250a:	bd80      	pop	{r7, pc}
 800250c:	fffffe5f 	.word	0xfffffe5f

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	2600      	movs	r6, #0
 8002514:	4d0c      	ldr	r5, [pc, #48]	; (8002548 <__libc_init_array+0x38>)
 8002516:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	2600      	movs	r6, #0
 8002522:	f000 f821 	bl	8002568 <_init>
 8002526:	4d0a      	ldr	r5, [pc, #40]	; (8002550 <__libc_init_array+0x40>)
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <__libc_init_array+0x44>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	00b3      	lsls	r3, r6, #2
 8002536:	58eb      	ldr	r3, [r5, r3]
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	00b3      	lsls	r3, r6, #2
 8002540:	58eb      	ldr	r3, [r5, r3]
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080025b8 	.word	0x080025b8
 800254c:	080025b8 	.word	0x080025b8
 8002550:	080025b8 	.word	0x080025b8
 8002554:	080025bc 	.word	0x080025bc

08002558 <memset>:
 8002558:	0003      	movs	r3, r0
 800255a:	1882      	adds	r2, r0, r2
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	7019      	strb	r1, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <_init>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr

08002574 <_fini>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr
