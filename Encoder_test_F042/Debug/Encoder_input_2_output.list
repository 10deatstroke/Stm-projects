
Encoder_input_2_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d0  080035d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035d0  080035d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035d0  080035d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080035e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080035e4  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c659  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f4  00000000  00000000  0002c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018623  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9ec  00000000  00000000  00047a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905de  00000000  00000000  0005447f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4a5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000e4ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003500 	.word	0x08003500

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003500 	.word	0x08003500

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fdiv+0x1c>
 800023a:	e070      	b.n	800031e <__aeabi_fdiv+0xfe>
 800023c:	2fff      	cmp	r7, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fdiv+0x22>
 8000240:	e075      	b.n	800032e <__aeabi_fdiv+0x10e>
 8000242:	00eb      	lsls	r3, r5, #3
 8000244:	2580      	movs	r5, #128	; 0x80
 8000246:	04ed      	lsls	r5, r5, #19
 8000248:	431d      	orrs	r5, r3
 800024a:	2300      	movs	r3, #0
 800024c:	4699      	mov	r9, r3
 800024e:	469a      	mov	sl, r3
 8000250:	3f7f      	subs	r7, #127	; 0x7f
 8000252:	0260      	lsls	r0, r4, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	0063      	lsls	r3, r4, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fe4      	lsrs	r4, r4, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d04e      	beq.n	8000300 <__aeabi_fdiv+0xe0>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d046      	beq.n	80002f4 <__aeabi_fdiv+0xd4>
 8000266:	4642      	mov	r2, r8
 8000268:	00d0      	lsls	r0, r2, #3
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	04d2      	lsls	r2, r2, #19
 800026e:	4302      	orrs	r2, r0
 8000270:	4690      	mov	r8, r2
 8000272:	2200      	movs	r2, #0
 8000274:	3b7f      	subs	r3, #127	; 0x7f
 8000276:	0031      	movs	r1, r6
 8000278:	1aff      	subs	r7, r7, r3
 800027a:	464b      	mov	r3, r9
 800027c:	4061      	eors	r1, r4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4313      	orrs	r3, r2
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d900      	bls.n	8000288 <__aeabi_fdiv+0x68>
 8000286:	e0b5      	b.n	80003f4 <__aeabi_fdiv+0x1d4>
 8000288:	486e      	ldr	r0, [pc, #440]	; (8000444 <__aeabi_fdiv+0x224>)
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	58c3      	ldr	r3, [r0, r3]
 800028e:	469f      	mov	pc, r3
 8000290:	2300      	movs	r3, #0
 8000292:	4698      	mov	r8, r3
 8000294:	0026      	movs	r6, r4
 8000296:	4645      	mov	r5, r8
 8000298:	4692      	mov	sl, r2
 800029a:	4653      	mov	r3, sl
 800029c:	2b02      	cmp	r3, #2
 800029e:	d100      	bne.n	80002a2 <__aeabi_fdiv+0x82>
 80002a0:	e089      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e09e      	b.n	80003e6 <__aeabi_fdiv+0x1c6>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d018      	beq.n	80002de <__aeabi_fdiv+0xbe>
 80002ac:	003b      	movs	r3, r7
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dd69      	ble.n	8000388 <__aeabi_fdiv+0x168>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	4b60      	ldr	r3, [pc, #384]	; (8000448 <__aeabi_fdiv+0x228>)
 80002c8:	401d      	ands	r5, r3
 80002ca:	003b      	movs	r3, r7
 80002cc:	3380      	adds	r3, #128	; 0x80
 80002ce:	2bfe      	cmp	r3, #254	; 0xfe
 80002d0:	dd00      	ble.n	80002d4 <__aeabi_fdiv+0xb4>
 80002d2:	e070      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002d4:	01ad      	lsls	r5, r5, #6
 80002d6:	0a6d      	lsrs	r5, r5, #9
 80002d8:	b2d8      	uxtb	r0, r3
 80002da:	e002      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80002dc:	000e      	movs	r6, r1
 80002de:	2000      	movs	r0, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	05c0      	lsls	r0, r0, #23
 80002e4:	4328      	orrs	r0, r5
 80002e6:	07f6      	lsls	r6, r6, #31
 80002e8:	4330      	orrs	r0, r6
 80002ea:	bce0      	pop	{r5, r6, r7}
 80002ec:	46ba      	mov	sl, r7
 80002ee:	46b1      	mov	r9, r6
 80002f0:	46a8      	mov	r8, r5
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f4:	4643      	mov	r3, r8
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d13f      	bne.n	800037a <__aeabi_fdiv+0x15a>
 80002fa:	2202      	movs	r2, #2
 80002fc:	3fff      	subs	r7, #255	; 0xff
 80002fe:	e003      	b.n	8000308 <__aeabi_fdiv+0xe8>
 8000300:	4643      	mov	r3, r8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d12d      	bne.n	8000362 <__aeabi_fdiv+0x142>
 8000306:	2201      	movs	r2, #1
 8000308:	0031      	movs	r1, r6
 800030a:	464b      	mov	r3, r9
 800030c:	4061      	eors	r1, r4
 800030e:	b2c9      	uxtb	r1, r1
 8000310:	4313      	orrs	r3, r2
 8000312:	2b0f      	cmp	r3, #15
 8000314:	d834      	bhi.n	8000380 <__aeabi_fdiv+0x160>
 8000316:	484d      	ldr	r0, [pc, #308]	; (800044c <__aeabi_fdiv+0x22c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	58c3      	ldr	r3, [r0, r3]
 800031c:	469f      	mov	pc, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d113      	bne.n	800034a <__aeabi_fdiv+0x12a>
 8000322:	2304      	movs	r3, #4
 8000324:	4699      	mov	r9, r3
 8000326:	3b03      	subs	r3, #3
 8000328:	2700      	movs	r7, #0
 800032a:	469a      	mov	sl, r3
 800032c:	e791      	b.n	8000252 <__aeabi_fdiv+0x32>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0x11e>
 8000332:	2308      	movs	r3, #8
 8000334:	4699      	mov	r9, r3
 8000336:	3b06      	subs	r3, #6
 8000338:	27ff      	movs	r7, #255	; 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e789      	b.n	8000252 <__aeabi_fdiv+0x32>
 800033e:	230c      	movs	r3, #12
 8000340:	4699      	mov	r9, r3
 8000342:	3b09      	subs	r3, #9
 8000344:	27ff      	movs	r7, #255	; 0xff
 8000346:	469a      	mov	sl, r3
 8000348:	e783      	b.n	8000252 <__aeabi_fdiv+0x32>
 800034a:	0028      	movs	r0, r5
 800034c:	f000 f8ce 	bl	80004ec <__clzsi2>
 8000350:	2776      	movs	r7, #118	; 0x76
 8000352:	1f43      	subs	r3, r0, #5
 8000354:	409d      	lsls	r5, r3
 8000356:	2300      	movs	r3, #0
 8000358:	427f      	negs	r7, r7
 800035a:	4699      	mov	r9, r3
 800035c:	469a      	mov	sl, r3
 800035e:	1a3f      	subs	r7, r7, r0
 8000360:	e777      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000362:	4640      	mov	r0, r8
 8000364:	f000 f8c2 	bl	80004ec <__clzsi2>
 8000368:	4642      	mov	r2, r8
 800036a:	1f43      	subs	r3, r0, #5
 800036c:	409a      	lsls	r2, r3
 800036e:	2376      	movs	r3, #118	; 0x76
 8000370:	425b      	negs	r3, r3
 8000372:	4690      	mov	r8, r2
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	2200      	movs	r2, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	23ff      	movs	r3, #255	; 0xff
 800037c:	2203      	movs	r2, #3
 800037e:	e77a      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000380:	000e      	movs	r6, r1
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	2500      	movs	r5, #0
 8000386:	e7ac      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000388:	2001      	movs	r0, #1
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	281b      	cmp	r0, #27
 800038e:	dca6      	bgt.n	80002de <__aeabi_fdiv+0xbe>
 8000390:	379e      	adds	r7, #158	; 0x9e
 8000392:	002a      	movs	r2, r5
 8000394:	40bd      	lsls	r5, r7
 8000396:	40c2      	lsrs	r2, r0
 8000398:	1e6b      	subs	r3, r5, #1
 800039a:	419d      	sbcs	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	076b      	lsls	r3, r5, #29
 80003a0:	d004      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003a2:	230f      	movs	r3, #15
 80003a4:	402b      	ands	r3, r5
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d000      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003aa:	3504      	adds	r5, #4
 80003ac:	016b      	lsls	r3, r5, #5
 80003ae:	d544      	bpl.n	800043a <__aeabi_fdiv+0x21a>
 80003b0:	2001      	movs	r0, #1
 80003b2:	2500      	movs	r5, #0
 80003b4:	e795      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003b6:	20ff      	movs	r0, #255	; 0xff
 80003b8:	2500      	movs	r5, #0
 80003ba:	e792      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003bc:	2580      	movs	r5, #128	; 0x80
 80003be:	2600      	movs	r6, #0
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	03ed      	lsls	r5, r5, #15
 80003c4:	e78d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003c6:	2300      	movs	r3, #0
 80003c8:	4698      	mov	r8, r3
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	03c0      	lsls	r0, r0, #15
 80003ce:	4205      	tst	r5, r0
 80003d0:	d009      	beq.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d2:	4643      	mov	r3, r8
 80003d4:	4203      	tst	r3, r0
 80003d6:	d106      	bne.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d8:	4645      	mov	r5, r8
 80003da:	4305      	orrs	r5, r0
 80003dc:	026d      	lsls	r5, r5, #9
 80003de:	0026      	movs	r6, r4
 80003e0:	20ff      	movs	r0, #255	; 0xff
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	e77d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003e6:	2080      	movs	r0, #128	; 0x80
 80003e8:	03c0      	lsls	r0, r0, #15
 80003ea:	4305      	orrs	r5, r0
 80003ec:	026d      	lsls	r5, r5, #9
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	0a6d      	lsrs	r5, r5, #9
 80003f2:	e776      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	016b      	lsls	r3, r5, #5
 80003f8:	0150      	lsls	r0, r2, #5
 80003fa:	4283      	cmp	r3, r0
 80003fc:	d219      	bcs.n	8000432 <__aeabi_fdiv+0x212>
 80003fe:	221b      	movs	r2, #27
 8000400:	2500      	movs	r5, #0
 8000402:	3f01      	subs	r7, #1
 8000404:	2601      	movs	r6, #1
 8000406:	001c      	movs	r4, r3
 8000408:	006d      	lsls	r5, r5, #1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2c00      	cmp	r4, #0
 800040e:	db01      	blt.n	8000414 <__aeabi_fdiv+0x1f4>
 8000410:	4298      	cmp	r0, r3
 8000412:	d801      	bhi.n	8000418 <__aeabi_fdiv+0x1f8>
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	4335      	orrs	r5, r6
 8000418:	3a01      	subs	r2, #1
 800041a:	2a00      	cmp	r2, #0
 800041c:	d1f3      	bne.n	8000406 <__aeabi_fdiv+0x1e6>
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4193      	sbcs	r3, r2
 8000422:	431d      	orrs	r5, r3
 8000424:	003b      	movs	r3, r7
 8000426:	337f      	adds	r3, #127	; 0x7f
 8000428:	000e      	movs	r6, r1
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd00      	ble.n	8000430 <__aeabi_fdiv+0x210>
 800042e:	e741      	b.n	80002b4 <__aeabi_fdiv+0x94>
 8000430:	e7aa      	b.n	8000388 <__aeabi_fdiv+0x168>
 8000432:	221a      	movs	r2, #26
 8000434:	2501      	movs	r5, #1
 8000436:	1a1b      	subs	r3, r3, r0
 8000438:	e7e4      	b.n	8000404 <__aeabi_fdiv+0x1e4>
 800043a:	01ad      	lsls	r5, r5, #6
 800043c:	2000      	movs	r0, #0
 800043e:	0a6d      	lsrs	r5, r5, #9
 8000440:	e74f      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	08003538 	.word	0x08003538
 8000448:	f7ffffff 	.word	0xf7ffffff
 800044c:	08003578 	.word	0x08003578

08000450 <__aeabi_i2f>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	2800      	cmp	r0, #0
 8000454:	d013      	beq.n	800047e <__aeabi_i2f+0x2e>
 8000456:	17c3      	asrs	r3, r0, #31
 8000458:	18c6      	adds	r6, r0, r3
 800045a:	405e      	eors	r6, r3
 800045c:	0fc4      	lsrs	r4, r0, #31
 800045e:	0030      	movs	r0, r6
 8000460:	f000 f844 	bl	80004ec <__clzsi2>
 8000464:	239e      	movs	r3, #158	; 0x9e
 8000466:	0005      	movs	r5, r0
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	2b96      	cmp	r3, #150	; 0x96
 800046c:	dc0f      	bgt.n	800048e <__aeabi_i2f+0x3e>
 800046e:	2808      	cmp	r0, #8
 8000470:	dd01      	ble.n	8000476 <__aeabi_i2f+0x26>
 8000472:	3d08      	subs	r5, #8
 8000474:	40ae      	lsls	r6, r5
 8000476:	0276      	lsls	r6, r6, #9
 8000478:	0a76      	lsrs	r6, r6, #9
 800047a:	b2d8      	uxtb	r0, r3
 800047c:	e002      	b.n	8000484 <__aeabi_i2f+0x34>
 800047e:	2400      	movs	r4, #0
 8000480:	2000      	movs	r0, #0
 8000482:	2600      	movs	r6, #0
 8000484:	05c0      	lsls	r0, r0, #23
 8000486:	4330      	orrs	r0, r6
 8000488:	07e4      	lsls	r4, r4, #31
 800048a:	4320      	orrs	r0, r4
 800048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800048e:	2b99      	cmp	r3, #153	; 0x99
 8000490:	dd0c      	ble.n	80004ac <__aeabi_i2f+0x5c>
 8000492:	2205      	movs	r2, #5
 8000494:	0031      	movs	r1, r6
 8000496:	1a12      	subs	r2, r2, r0
 8000498:	40d1      	lsrs	r1, r2
 800049a:	000a      	movs	r2, r1
 800049c:	0001      	movs	r1, r0
 800049e:	0030      	movs	r0, r6
 80004a0:	311b      	adds	r1, #27
 80004a2:	4088      	lsls	r0, r1
 80004a4:	1e41      	subs	r1, r0, #1
 80004a6:	4188      	sbcs	r0, r1
 80004a8:	4302      	orrs	r2, r0
 80004aa:	0016      	movs	r6, r2
 80004ac:	2d05      	cmp	r5, #5
 80004ae:	dc12      	bgt.n	80004d6 <__aeabi_i2f+0x86>
 80004b0:	0031      	movs	r1, r6
 80004b2:	4f0d      	ldr	r7, [pc, #52]	; (80004e8 <__aeabi_i2f+0x98>)
 80004b4:	4039      	ands	r1, r7
 80004b6:	0772      	lsls	r2, r6, #29
 80004b8:	d009      	beq.n	80004ce <__aeabi_i2f+0x7e>
 80004ba:	200f      	movs	r0, #15
 80004bc:	4030      	ands	r0, r6
 80004be:	2804      	cmp	r0, #4
 80004c0:	d005      	beq.n	80004ce <__aeabi_i2f+0x7e>
 80004c2:	3104      	adds	r1, #4
 80004c4:	014a      	lsls	r2, r1, #5
 80004c6:	d502      	bpl.n	80004ce <__aeabi_i2f+0x7e>
 80004c8:	239f      	movs	r3, #159	; 0x9f
 80004ca:	4039      	ands	r1, r7
 80004cc:	1b5b      	subs	r3, r3, r5
 80004ce:	0189      	lsls	r1, r1, #6
 80004d0:	0a4e      	lsrs	r6, r1, #9
 80004d2:	b2d8      	uxtb	r0, r3
 80004d4:	e7d6      	b.n	8000484 <__aeabi_i2f+0x34>
 80004d6:	1f6a      	subs	r2, r5, #5
 80004d8:	4096      	lsls	r6, r2
 80004da:	0031      	movs	r1, r6
 80004dc:	4f02      	ldr	r7, [pc, #8]	; (80004e8 <__aeabi_i2f+0x98>)
 80004de:	4039      	ands	r1, r7
 80004e0:	0772      	lsls	r2, r6, #29
 80004e2:	d0f4      	beq.n	80004ce <__aeabi_i2f+0x7e>
 80004e4:	e7e9      	b.n	80004ba <__aeabi_i2f+0x6a>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	fbffffff 	.word	0xfbffffff

080004ec <__clzsi2>:
 80004ec:	211c      	movs	r1, #28
 80004ee:	2301      	movs	r3, #1
 80004f0:	041b      	lsls	r3, r3, #16
 80004f2:	4298      	cmp	r0, r3
 80004f4:	d301      	bcc.n	80004fa <__clzsi2+0xe>
 80004f6:	0c00      	lsrs	r0, r0, #16
 80004f8:	3910      	subs	r1, #16
 80004fa:	0a1b      	lsrs	r3, r3, #8
 80004fc:	4298      	cmp	r0, r3
 80004fe:	d301      	bcc.n	8000504 <__clzsi2+0x18>
 8000500:	0a00      	lsrs	r0, r0, #8
 8000502:	3908      	subs	r1, #8
 8000504:	091b      	lsrs	r3, r3, #4
 8000506:	4298      	cmp	r0, r3
 8000508:	d301      	bcc.n	800050e <__clzsi2+0x22>
 800050a:	0900      	lsrs	r0, r0, #4
 800050c:	3904      	subs	r1, #4
 800050e:	a202      	add	r2, pc, #8	; (adr r2, 8000518 <__clzsi2+0x2c>)
 8000510:	5c10      	ldrb	r0, [r2, r0]
 8000512:	1840      	adds	r0, r0, r1
 8000514:	4770      	bx	lr
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	02020304 	.word	0x02020304
 800051c:	01010101 	.word	0x01010101
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fc79 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f843 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f97f 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f94d 	bl	80007d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800053e:	f000 f879 	bl	8000634 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000542:	f000 f8fd 	bl	8000740 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  set_base_sec_timer(HAL_GetTick());
 8000546:	f000 fcc7 	bl	8000ed8 <HAL_GetTick>
 800054a:	0003      	movs	r3, r0
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fb07 	bl	8000b60 <set_base_sec_timer>
  HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1);
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <main+0x7c>)
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fd74 	bl	8002044 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0x7c>)
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fccc 	bl	8001efc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t current_time = HAL_GetTick();
 8000564:	f000 fcb8 	bl	8000ed8 <HAL_GetTick>
 8000568:	0003      	movs	r3, r0
 800056a:	607b      	str	r3, [r7, #4]

//	  timer and counter reset logic
	  if(current_time - base_sec_counter > 7000){
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0x80>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <main+0x84>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d905      	bls.n	8000586 <main+0x5e>
		  set_base_sec_timer(current_time);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f000 faef 	bl	8000b60 <set_base_sec_timer>
		  reset_input_counter();
 8000582:	f000 fafb 	bl	8000b7c <reset_input_counter>
	  }
	  rotation_position = input_counter/(float)COMPLETE_ROTATION_COUNT;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <main+0x88>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff ff60 	bl	8000450 <__aeabi_i2f>
 8000590:	1c03      	adds	r3, r0, #0
 8000592:	4908      	ldr	r1, [pc, #32]	; (80005b4 <main+0x8c>)
 8000594:	1c18      	adds	r0, r3, #0
 8000596:	f7ff fe43 	bl	8000220 <__aeabi_fdiv>
 800059a:	1c03      	adds	r3, r0, #0
 800059c:	1c1a      	adds	r2, r3, #0
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <main+0x90>)
 80005a0:	601a      	str	r2, [r3, #0]
  {
 80005a2:	e7df      	b.n	8000564 <main+0x3c>
 80005a4:	20000070 	.word	0x20000070
 80005a8:	2000013c 	.word	0x2000013c
 80005ac:	00001b58 	.word	0x00001b58
 80005b0:	20000144 	.word	0x20000144
 80005b4:	41a3d70a 	.word	0x41a3d70a
 80005b8:	20000148 	.word	0x20000148

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b093      	sub	sp, #76	; 0x4c
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	2414      	movs	r4, #20
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2334      	movs	r3, #52	; 0x34
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 ff8f 	bl	80034f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2310      	movs	r3, #16
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 ff88 	bl	80034f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2220      	movs	r2, #32
 80005e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2201      	movs	r2, #1
 80005ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 ff31 	bl	800145c <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005fe:	f000 fac7 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2207      	movs	r2, #7
 8000606:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2203      	movs	r2, #3
 800060c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2101      	movs	r1, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 faa2 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000628:	f000 fab2 	bl	8000b90 <Error_Handler>
  }
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b013      	add	sp, #76	; 0x4c
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2328      	movs	r3, #40	; 0x28
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f002 ff53 	bl	80034f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	2320      	movs	r3, #32
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2308      	movs	r3, #8
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 ff4b 	bl	80034f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	231c      	movs	r3, #28
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f002 ff44 	bl	80034f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_TIM3_Init+0x100>)
 800066a:	4a33      	ldr	r2, [pc, #204]	; (8000738 <MX_TIM3_Init+0x104>)
 800066c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_TIM3_Init+0x100>)
 8000670:	222f      	movs	r2, #47	; 0x2f
 8000672:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_TIM3_Init+0x100>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <MX_TIM3_Init+0x100>)
 800067c:	4a2f      	ldr	r2, [pc, #188]	; (800073c <MX_TIM3_Init+0x108>)
 800067e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_TIM3_Init+0x100>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_TIM3_Init+0x100>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_TIM3_Init+0x100>)
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fbe4 	bl	8001e5c <HAL_TIM_Base_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000698:	f000 fa7a 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	2128      	movs	r1, #40	; 0x28
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0152      	lsls	r2, r2, #5
 80006a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_TIM3_Init+0x100>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ff3f 	bl	8002530 <HAL_TIM_ConfigClockSource>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 fa6b 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_TIM3_Init+0x100>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fc69 	bl	8001f94 <HAL_TIM_OC_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006c6:	f000 fa63 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2120      	movs	r1, #32
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_TIM3_Init+0x100>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fb26 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006e8:	f000 fa52 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_TIM3_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 feb8 	bl	8002480 <HAL_TIM_OC_ConfigChannel>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000714:	f000 fa3c 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_TIM3_Init+0x100>)
 800071c:	2204      	movs	r2, #4
 800071e:	0018      	movs	r0, r3
 8000720:	f001 feae 	bl	8002480 <HAL_TIM_OC_ConfigChannel>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000728:	f000 fa32 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b00e      	add	sp, #56	; 0x38
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000028 	.word	0x20000028
 8000738:	40000400 	.word	0x40000400
 800073c:	0000c350 	.word	0x0000c350

08000740 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	231c      	movs	r3, #28
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f002 fece 	bl	80034f0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_TIM14_Init+0x90>)
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <MX_TIM14_Init+0x94>)
 8000758:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_TIM14_Init+0x90>)
 800075c:	222f      	movs	r2, #47	; 0x2f
 800075e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_TIM14_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_TIM14_Init+0x90>)
 8000768:	22f4      	movs	r2, #244	; 0xf4
 800076a:	32ff      	adds	r2, #255	; 0xff
 800076c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_TIM14_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_TIM14_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM14_Init+0x90>)
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fb6d 	bl	8001e5c <HAL_TIM_Base_Init>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000786:	f000 fa03 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_TIM14_Init+0x90>)
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fc01 	bl	8001f94 <HAL_TIM_OC_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000796:	f000 f9fb 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 250-1;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	22f9      	movs	r2, #249	; 0xf9
 80007a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b2:	1d39      	adds	r1, r7, #4
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_TIM14_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fe61 	bl	8002480 <HAL_TIM_OC_ConfigChannel>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80007c2:	f000 f9e5 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b008      	add	sp, #32
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000070 	.word	0x20000070
 80007d4:	40002000 	.word	0x40002000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	2296      	movs	r2, #150	; 0x96
 80007e6:	0212      	lsls	r2, r2, #8
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	0018      	movs	r0, r3
 800081e:	f002 faef 	bl	8002e00 <HAL_UART_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f9b3 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000b8 	.word	0x200000b8
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	240c      	movs	r4, #12
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f002 fe51 	bl	80034f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_GPIO_Init+0x10c>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_GPIO_Init+0x10c>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	03c9      	lsls	r1, r1, #15
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_GPIO_Init+0x10c>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	03db      	lsls	r3, r3, #15
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_GPIO_Init+0x10c>)
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_GPIO_Init+0x10c>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0289      	lsls	r1, r1, #10
 8000874:	430a      	orrs	r2, r1
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	4b32      	ldr	r3, [pc, #200]	; (8000944 <MX_GPIO_Init+0x10c>)
 800087a:	695a      	ldr	r2, [r3, #20]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	029b      	lsls	r3, r3, #10
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_GPIO_Init+0x10c>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0x10c>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	02c9      	lsls	r1, r1, #11
 8000890:	430a      	orrs	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_GPIO_Init+0x10c>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	02db      	lsls	r3, r3, #11
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out_Encoder_A_Pin|Out_Encoder_B_Pin, GPIO_PIN_RESET);
 80008a2:	2390      	movs	r3, #144	; 0x90
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fd81 	bl	80013b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Out_Encoder_A_Pin Out_Encoder_B_Pin */
  GPIO_InitStruct.Pin = Out_Encoder_A_Pin|Out_Encoder_B_Pin;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2203      	movs	r2, #3
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	193a      	adds	r2, r7, r4
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fbe9 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_B_Pin ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin|ENCODER_A_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2281      	movs	r2, #129	; 0x81
 80008dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	22c4      	movs	r2, #196	; 0xc4
 80008e2:	0392      	lsls	r2, r2, #14
 80008e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	000c      	movs	r4, r1
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_GPIO_Init+0x110>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f000 fbd7 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_in_B_Pin Temp_in_A_Pin */
  GPIO_InitStruct.Pin = Temp_in_B_Pin|Temp_in_A_Pin;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2288      	movs	r2, #136	; 0x88
 8000906:	0352      	lsls	r2, r2, #13
 8000908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	187b      	adds	r3, r7, r1
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <MX_GPIO_Init+0x110>)
 8000914:	0019      	movs	r1, r3
 8000916:	0010      	movs	r0, r2
 8000918:	f000 fbc6 	bl	80010a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2005      	movs	r0, #5
 8000922:	f000 fb8f 	bl	8001044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000926:	2005      	movs	r0, #5
 8000928:	f000 fba1 	bl	800106e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2007      	movs	r0, #7
 8000932:	f000 fb87 	bl	8001044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000936:	2007      	movs	r0, #7
 8000938:	f000 fb99 	bl	800106e <HAL_NVIC_EnableIRQ>

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b009      	add	sp, #36	; 0x24
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	48000400 	.word	0x48000400

0800094c <Interrupt_reader>:

/* USER CODE BEGIN 4 */

void Interrupt_reader(uint16_t Gpio_pin) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	801a      	strh	r2, [r3, #0]
	 * 	|1	|	1|
	 * 	|1	|	0|
	 * 	|0	|	0|
	 * 	+---+----+
	 */
	if (Gpio_pin == ENCODER_A_Pin || Gpio_pin == ENCODER_B_Pin) {
 8000958:	1dbb      	adds	r3, r7, #6
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2b80      	cmp	r3, #128	; 0x80
 800095e:	d004      	beq.n	800096a <Interrupt_reader+0x1e>
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d000      	beq.n	800096a <Interrupt_reader+0x1e>
 8000968:	e0b2      	b.n	8000ad0 <Interrupt_reader+0x184>

		enc_input_A.encoder_input = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin);
 800096a:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <Interrupt_reader+0x18c>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fd02 	bl	8001378 <HAL_GPIO_ReadPin>
 8000974:	0003      	movs	r3, r0
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	4193      	sbcs	r3, r2
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b57      	ldr	r3, [pc, #348]	; (8000adc <Interrupt_reader+0x190>)
 800097e:	2101      	movs	r1, #1
 8000980:	400a      	ands	r2, r1
 8000982:	0010      	movs	r0, r2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	2101      	movs	r1, #1
 8000988:	438a      	bics	r2, r1
 800098a:	1c11      	adds	r1, r2, #0
 800098c:	1c02      	adds	r2, r0, #0
 800098e:	430a      	orrs	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
		enc_input_B.encoder_input = HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <Interrupt_reader+0x18c>)
 8000994:	2101      	movs	r1, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fcee 	bl	8001378 <HAL_GPIO_ReadPin>
 800099c:	0003      	movs	r3, r0
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	4193      	sbcs	r3, r2
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <Interrupt_reader+0x194>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	400a      	ands	r2, r1
 80009aa:	0010      	movs	r0, r2
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	438a      	bics	r2, r1
 80009b2:	1c11      	adds	r1, r2, #0
 80009b4:	1c02      	adds	r2, r0, #0
 80009b6:	430a      	orrs	r2, r1
 80009b8:	701a      	strb	r2, [r3, #0]
		new_enc_state = enc_input_A.encoder_input << 1 | enc_input_B.encoder_input;
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <Interrupt_reader+0x190>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	07db      	lsls	r3, r3, #31
 80009c0:	0fdb      	lsrs	r3, r3, #31
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	b25a      	sxtb	r2, r3
 80009c8:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <Interrupt_reader+0x194>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	07db      	lsls	r3, r3, #31
 80009ce:	0fdb      	lsrs	r3, r3, #31
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <Interrupt_reader+0x198>)
 80009dc:	701a      	strb	r2, [r3, #0]

		if (old_enc_state == 0 && new_enc_state == 1) {
 80009de:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <Interrupt_reader+0x19c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d109      	bne.n	80009fa <Interrupt_reader+0xae>
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <Interrupt_reader+0x198>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d105      	bne.n	80009fa <Interrupt_reader+0xae>
			input_counter++;
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <Interrupt_reader+0x1a0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <Interrupt_reader+0x1a0>)
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e060      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 1 && new_enc_state == 3) {
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <Interrupt_reader+0x19c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d109      	bne.n	8000a16 <Interrupt_reader+0xca>
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d105      	bne.n	8000a16 <Interrupt_reader+0xca>
			input_counter++;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e052      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 3 && new_enc_state == 2) {
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d109      	bne.n	8000a32 <Interrupt_reader+0xe6>
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d105      	bne.n	8000a32 <Interrupt_reader+0xe6>
			input_counter++;
 8000a26:	4b31      	ldr	r3, [pc, #196]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e044      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 2 && new_enc_state == 0) {
 8000a32:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d109      	bne.n	8000a4e <Interrupt_reader+0x102>
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d105      	bne.n	8000a4e <Interrupt_reader+0x102>
			input_counter++;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e036      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 0 && new_enc_state == 2) {
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d109      	bne.n	8000a6a <Interrupt_reader+0x11e>
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d105      	bne.n	8000a6a <Interrupt_reader+0x11e>
			input_counter--;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e028      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 2 && new_enc_state == 3) {
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d109      	bne.n	8000a86 <Interrupt_reader+0x13a>
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d105      	bne.n	8000a86 <Interrupt_reader+0x13a>
			input_counter--;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	e01a      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 3 && new_enc_state == 1) {
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d109      	bne.n	8000aa2 <Interrupt_reader+0x156>
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <Interrupt_reader+0x198>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d105      	bne.n	8000aa2 <Interrupt_reader+0x156>
			input_counter--;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <Interrupt_reader+0x1a0>)
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e00c      	b.n	8000abc <Interrupt_reader+0x170>
		} else if (old_enc_state == 1 && new_enc_state == 0) {
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <Interrupt_reader+0x170>
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <Interrupt_reader+0x198>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d104      	bne.n	8000abc <Interrupt_reader+0x170>
			input_counter--;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <Interrupt_reader+0x1a0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <Interrupt_reader+0x1a0>)
 8000aba:	601a      	str	r2, [r3, #0]
		}
		old_enc_state = new_enc_state;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <Interrupt_reader+0x198>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <Interrupt_reader+0x19c>)
 8000ac2:	701a      	strb	r2, [r3, #0]
		set_base_sec_timer(HAL_GetTick());
 8000ac4:	f000 fa08 	bl	8000ed8 <HAL_GetTick>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f848 	bl	8000b60 <set_base_sec_timer>
//		} else if (generated_out_enc_new_state == 1 && generated_out_enc_new_state == 0) {
//			generated_output--;
//		}
//		generated_out_enc_old_state = generated_out_enc_new_state;
//	}
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	2000014c 	.word	0x2000014c
 8000ae0:	20000160 	.word	0x20000160
 8000ae4:	20000141 	.word	0x20000141
 8000ae8:	20000140 	.word	0x20000140
 8000aec:	20000144 	.word	0x20000144

08000af0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d105      	bne.n	8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(Out_Encoder_A_GPIO_Port, Out_Encoder_A_Pin);
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2101      	movs	r1, #1
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fc70 	bl	80013ec <HAL_GPIO_TogglePin>
	}
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000070 	.word	0x20000070

08000b18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d105      	bne.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(Out_Encoder_B_GPIO_Port, Out_Encoder_B_Pin);
 8000b28:	2390      	movs	r3, #144	; 0x90
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fc5c 	bl	80013ec <HAL_GPIO_TogglePin>
	}
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000070 	.word	0x20000070

08000b40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0002      	movs	r2, r0
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	801a      	strh	r2, [r3, #0]
	Interrupt_reader(GPIO_Pin);
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fefb 	bl	800094c <Interrupt_reader>
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <set_base_sec_timer>:

void set_base_sec_timer(uint32_t time){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	base_sec_counter = time;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <set_base_sec_timer+0x18>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	2000013c 	.word	0x2000013c

08000b7c <reset_input_counter>:

void reset_input_counter(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	input_counter = 0;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <reset_input_counter+0x10>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000144 	.word	0x20000144

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	430a      	orrs	r2, r1
 8000bac:	619a      	str	r2, [r3, #24]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	69da      	ldr	r2, [r3, #28]
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	0549      	lsls	r1, r1, #21
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	61da      	str	r2, [r3, #28]
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_MspInit+0x44>)
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	055b      	lsls	r3, r3, #21
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_TIM_Base_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d114      	bne.n	8000c20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	61da      	str	r2, [r3, #28]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	2202      	movs	r2, #2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2010      	movs	r0, #16
 8000c14:	f000 fa16 	bl	8001044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c18:	2010      	movs	r0, #16
 8000c1a:	f000 fa28 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000c1e:	e01a      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d115      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	430a      	orrs	r2, r1
 8000c36:	61da      	str	r2, [r3, #28]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2013      	movs	r0, #19
 8000c4c:	f000 f9fa 	bl	8001044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c50:	2013      	movs	r0, #19
 8000c52:	f000 fa0c 	bl	800106e <HAL_NVIC_EnableIRQ>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40000400 	.word	0x40000400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40002000 	.word	0x40002000

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b08b      	sub	sp, #44	; 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	2414      	movs	r4, #20
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f002 fc36 	bl	80034f0 <memset>
  if(huart->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_UART_MspInit+0x90>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d132      	bne.n	8000cf4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000c90:	69da      	ldr	r2, [r3, #28]
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0289      	lsls	r1, r1, #10
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	61da      	str	r2, [r3, #28]
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000c9e:	69da      	ldr	r2, [r3, #28]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	0289      	lsls	r1, r1, #10
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x94>)
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	029b      	lsls	r3, r3, #10
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x98>)
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	2390      	movs	r3, #144	; 0x90
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f9da 	bl	80010a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	; 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	00008004 	.word	0x00008004

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f8c2 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fb72 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_in_B_Pin);
 8000d4a:	2010      	movs	r0, #16
 8000d4c:	f000 fb6a 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Temp_in_A_Pin);
 8000d50:	2020      	movs	r0, #32
 8000d52:	f000 fb67 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	f000 fb64 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <TIM3_IRQHandler+0x14>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 fa72 	bl	8002254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000028 	.word	0x20000028

08000d7c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <TIM14_IRQHandler+0x14>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 fa66 	bl	8002254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000070 	.word	0x20000070

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000da6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000da8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <LoopForever+0xa>)
    CMP R1, R2
 8000dac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000dae:	d105      	bne.n	8000dbc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000db2:	4913      	ldr	r1, [pc, #76]	; (8000e00 <LoopForever+0x12>)
    STR R1, [R0]
 8000db4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000db8:	4913      	ldr	r1, [pc, #76]	; (8000e08 <LoopForever+0x1a>)
    STR R1, [R0]
 8000dba:	6001      	str	r1, [r0, #0]

08000dbc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dbe:	4914      	ldr	r1, [pc, #80]	; (8000e10 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <LoopForever+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dd4:	4c11      	ldr	r4, [pc, #68]	; (8000e1c <LoopForever+0x2e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000de6:	f002 fb5f 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dea:	f7ff fb9d 	bl	8000528 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   r0, =_estack
 8000df0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000df4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000df8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000dfc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e14:	080035d8 	.word	0x080035d8
  ldr r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e1c:	20000178 	.word	0x20000178

08000e20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_IRQHandler>
	...

08000e24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_Init+0x24>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_Init+0x24>)
 8000e2e:	2110      	movs	r1, #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f809 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3a:	f7ff feaf 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40022000 	.word	0x40022000

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x60>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	23fa      	movs	r3, #250	; 0xfa
 8000e60:	0098      	lsls	r0, r3, #2
 8000e62:	f7ff f951 	bl	8000108 <__udivsi3>
 8000e66:	0003      	movs	r3, r0
 8000e68:	0019      	movs	r1, r3
 8000e6a:	0020      	movs	r0, r4
 8000e6c:	f7ff f94c 	bl	8000108 <__udivsi3>
 8000e70:	0003      	movs	r3, r0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 f90b 	bl	800108e <HAL_SYSTICK_Config>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e00f      	b.n	8000ea0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d80b      	bhi.n	8000e9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	425b      	negs	r3, r3
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f8d8 	bl	8001044 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_InitTick+0x64>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x1c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_IncTick+0x20>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	18d2      	adds	r2, r2, r3
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_IncTick+0x20>)
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000174 	.word	0x20000174

08000ed8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <HAL_GetTick+0x10>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	20000174 	.word	0x20000174

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b7f      	cmp	r3, #127	; 0x7f
 8000efe:	d809      	bhi.n	8000f14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001a      	movs	r2, r3
 8000f06:	231f      	movs	r3, #31
 8000f08:	401a      	ands	r2, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_EnableIRQ+0x30>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4091      	lsls	r1, r2
 8000f10:	000a      	movs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
  }
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b7f      	cmp	r3, #127	; 0x7f
 8000f34:	d828      	bhi.n	8000f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f36:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <__NVIC_SetPriority+0xd4>)
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	33c0      	adds	r3, #192	; 0xc0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	589b      	ldr	r3, [r3, r2]
 8000f46:	1dfa      	adds	r2, r7, #7
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	400a      	ands	r2, r1
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	401a      	ands	r2, r3
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	4003      	ands	r3, r0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <__NVIC_SetPriority+0xd4>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	33c0      	adds	r3, #192	; 0xc0
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f86:	e031      	b.n	8000fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <__NVIC_SetPriority+0xd8>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0019      	movs	r1, r3
 8000f90:	230f      	movs	r3, #15
 8000f92:	400b      	ands	r3, r1
 8000f94:	3b08      	subs	r3, #8
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3306      	adds	r3, #6
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	2203      	movs	r2, #3
 8000faa:	400a      	ands	r2, r1
 8000fac:	00d2      	lsls	r2, r2, #3
 8000fae:	21ff      	movs	r1, #255	; 0xff
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2303      	movs	r3, #3
 8000fca:	4003      	ands	r3, r0
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <__NVIC_SetPriority+0xd8>)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4023      	ands	r3, r4
 8000fdc:	3b08      	subs	r3, #8
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	3306      	adds	r3, #6
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	18c3      	adds	r3, r0, r3
 8000fe8:	3304      	adds	r3, #4
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b003      	add	sp, #12
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	1e5a      	subs	r2, r3, #1
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	045b      	lsls	r3, r3, #17
 800100c:	429a      	cmp	r2, r3
 800100e:	d301      	bcc.n	8001014 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001010:	2301      	movs	r3, #1
 8001012:	e010      	b.n	8001036 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <SysTick_Config+0x44>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	3a01      	subs	r2, #1
 800101a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	2103      	movs	r1, #3
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff ff7c 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x44>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x44>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	210f      	movs	r1, #15
 8001050:	187b      	adds	r3, r7, r1
 8001052:	1c02      	adds	r2, r0, #0
 8001054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	187b      	adds	r3, r7, r1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b25b      	sxtb	r3, r3
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	0002      	movs	r2, r0
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff33 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ffaf 	bl	8000ffc <SysTick_Config>
 800109e:	0003      	movs	r3, r0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e149      	b.n	800134c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d100      	bne.n	80010d0 <HAL_GPIO_Init+0x28>
 80010ce:	e13a      	b.n	8001346 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d005      	beq.n	80010e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	2201      	movs	r2, #1
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	4013      	ands	r3, r2
 8001152:	2b03      	cmp	r3, #3
 8001154:	d017      	beq.n	8001186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	4013      	ands	r3, r2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d123      	bne.n	80011da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	58d3      	ldr	r3, [r2, r3]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2207      	movs	r2, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2107      	movs	r1, #7
 80011be:	400b      	ands	r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	401a      	ands	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	d100      	bne.n	800121c <HAL_GPIO_Init+0x174>
 800121a:	e094      	b.n	8001346 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x2bc>)
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	4b50      	ldr	r3, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x2bc>)
 8001222:	2101      	movs	r1, #1
 8001224:	430a      	orrs	r2, r1
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x2bc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2201      	movs	r2, #1
 800122e:	4013      	ands	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x2c0>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	589b      	ldr	r3, [r3, r2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	2390      	movs	r3, #144	; 0x90
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	429a      	cmp	r2, r3
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1d6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_GPIO_Init+0x2c4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1d2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a40      	ldr	r2, [pc, #256]	; (8001370 <HAL_GPIO_Init+0x2c8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1ce>
 8001272:	2302      	movs	r3, #2
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x1d8>
 8001276:	2305      	movs	r3, #5
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x1d8>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x1d8>
 800127e:	2300      	movs	r3, #0
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	2103      	movs	r1, #3
 8001284:	400a      	ands	r2, r1
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x2c0>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	035b      	lsls	r3, r3, #13
 800130a:	4013      	ands	r3, r2
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43da      	mvns	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	039b      	lsls	r3, r3, #14
 8001334:	4013      	ands	r3, r2
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	40da      	lsrs	r2, r3
 8001354:	1e13      	subs	r3, r2, #0
 8001356:	d000      	beq.n	800135a <HAL_GPIO_Init+0x2b2>
 8001358:	e6ae      	b.n	80010b8 <HAL_GPIO_Init+0x10>
  } 
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b006      	add	sp, #24
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	48000400 	.word	0x48000400
 8001370:	48000800 	.word	0x48000800
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	000a      	movs	r2, r1
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	1cba      	adds	r2, r7, #2
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	4013      	ands	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e003      	b.n	80013a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	781b      	ldrb	r3, [r3, #0]
  }
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	0008      	movs	r0, r1
 80013bc:	0011      	movs	r1, r2
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	1c02      	adds	r2, r0, #0
 80013c2:	801a      	strh	r2, [r3, #0]
 80013c4:	1c7b      	adds	r3, r7, #1
 80013c6:	1c0a      	adds	r2, r1, #0
 80013c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	1cbb      	adds	r3, r7, #2
 80013d4:	881a      	ldrh	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013da:	e003      	b.n	80013e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	000a      	movs	r2, r1
 80013f6:	1cbb      	adds	r3, r7, #2
 80013f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	1cb9      	adds	r1, r7, #2
 8001410:	8809      	ldrh	r1, [r1, #0]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	1dba      	adds	r2, r7, #6
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	4013      	ands	r3, r2
 800143a:	d008      	beq.n	800144e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800143e:	1dba      	adds	r2, r7, #6
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fb79 	bl	8000b40 <HAL_GPIO_EXTI_Callback>
  }
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	f000 fb76 	bl	8001b5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_RCC_OscConfig+0x20>
 800147a:	e08e      	b.n	800159a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800147c:	4bc5      	ldr	r3, [pc, #788]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	220c      	movs	r2, #12
 8001482:	4013      	ands	r3, r2
 8001484:	2b04      	cmp	r3, #4
 8001486:	d00e      	beq.n	80014a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001488:	4bc2      	ldr	r3, [pc, #776]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	220c      	movs	r2, #12
 800148e:	4013      	ands	r3, r2
 8001490:	2b08      	cmp	r3, #8
 8001492:	d117      	bne.n	80014c4 <HAL_RCC_OscConfig+0x68>
 8001494:	4bbf      	ldr	r3, [pc, #764]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	025b      	lsls	r3, r3, #9
 800149c:	401a      	ands	r2, r3
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d10e      	bne.n	80014c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4bbb      	ldr	r3, [pc, #748]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_RCC_OscConfig+0x58>
 80014b2:	e071      	b.n	8001598 <HAL_RCC_OscConfig+0x13c>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d000      	beq.n	80014be <HAL_RCC_OscConfig+0x62>
 80014bc:	e06c      	b.n	8001598 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 fb4c 	bl	8001b5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x80>
 80014cc:	4bb1      	ldr	r3, [pc, #708]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4bb0      	ldr	r3, [pc, #704]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0249      	lsls	r1, r1, #9
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e02f      	b.n	800153c <HAL_RCC_OscConfig+0xe0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0xa2>
 80014e4:	4bab      	ldr	r3, [pc, #684]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4baa      	ldr	r3, [pc, #680]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014ea:	49ab      	ldr	r1, [pc, #684]	; (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	4ba8      	ldr	r3, [pc, #672]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4ba7      	ldr	r3, [pc, #668]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80014f6:	49a9      	ldr	r1, [pc, #676]	; (800179c <HAL_RCC_OscConfig+0x340>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e01e      	b.n	800153c <HAL_RCC_OscConfig+0xe0>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0xc8>
 8001506:	4ba3      	ldr	r3, [pc, #652]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4ba2      	ldr	r3, [pc, #648]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	02c9      	lsls	r1, r1, #11
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4b9f      	ldr	r3, [pc, #636]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b9e      	ldr	r3, [pc, #632]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0249      	lsls	r1, r1, #9
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xe0>
 8001524:	4b9b      	ldr	r3, [pc, #620]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b9a      	ldr	r3, [pc, #616]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800152a:	499b      	ldr	r1, [pc, #620]	; (8001798 <HAL_RCC_OscConfig+0x33c>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	4b98      	ldr	r3, [pc, #608]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b97      	ldr	r3, [pc, #604]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001536:	4999      	ldr	r1, [pc, #612]	; (800179c <HAL_RCC_OscConfig+0x340>)
 8001538:	400a      	ands	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d014      	beq.n	800156e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fcc8 	bl	8000ed8 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff fcc3 	bl	8000ed8 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e2fd      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001560:	4b8c      	ldr	r3, [pc, #560]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4013      	ands	r3, r2
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0xf2>
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fcb3 	bl	8000ed8 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fcae 	bl	8000ed8 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e2e8      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b82      	ldr	r3, [pc, #520]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	4013      	ands	r3, r2
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x11c>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_OscConfig+0x14a>
 80015a4:	e06c      	b.n	8001680 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015a6:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	220c      	movs	r2, #12
 80015ac:	4013      	ands	r3, r2
 80015ae:	d00e      	beq.n	80015ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015b0:	4b78      	ldr	r3, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	220c      	movs	r2, #12
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d11f      	bne.n	80015fc <HAL_RCC_OscConfig+0x1a0>
 80015bc:	4b75      	ldr	r3, [pc, #468]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	23c0      	movs	r3, #192	; 0xc0
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	401a      	ands	r2, r3
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x188>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e2bb      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	22f8      	movs	r2, #248	; 0xf8
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00da      	lsls	r2, r3, #3
 80015f4:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e041      	b.n	8001680 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d024      	beq.n	800164e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b62      	ldr	r3, [pc, #392]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc62 	bl	8000ed8 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fc5d 	bl	8000ed8 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e297      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d0f1      	beq.n	800161a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b57      	ldr	r3, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	22f8      	movs	r2, #248	; 0xf8
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	00da      	lsls	r2, r3, #3
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001654:	2101      	movs	r1, #1
 8001656:	438a      	bics	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fc3d 	bl	8000ed8 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fc38 	bl	8000ed8 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e272      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d1f1      	bne.n	8001664 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2208      	movs	r2, #8
 8001686:	4013      	ands	r3, r2
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d019      	beq.n	80016c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc1b 	bl	8000ed8 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fc16 	bl	8000ed8 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e250      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f1      	beq.n	80016a8 <HAL_RCC_OscConfig+0x24c>
 80016c4:	e018      	b.n	80016f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80016c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	438a      	bics	r2, r1
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fc01 	bl	8000ed8 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fbfc 	bl	8000ed8 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e236      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d1f1      	bne.n	80016dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2204      	movs	r2, #4
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_RCC_OscConfig+0x2a8>
 8001702:	e0b5      	b.n	8001870 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001704:	201f      	movs	r0, #31
 8001706:	183b      	adds	r3, r7, r0
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	055b      	lsls	r3, r3, #21
 8001714:	4013      	ands	r3, r2
 8001716:	d110      	bne.n	800173a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	0549      	lsls	r1, r1, #21
 8001722:	430a      	orrs	r2, r1
 8001724:	61da      	str	r2, [r3, #28]
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	055b      	lsls	r3, r3, #21
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001734:	183b      	adds	r3, r7, r0
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x344>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_RCC_OscConfig+0x344>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_RCC_OscConfig+0x344>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0049      	lsls	r1, r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001754:	f7ff fbc0 	bl	8000ed8 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fbbb 	bl	8000ed8 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1f5      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x344>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10f      	bne.n	80017a4 <HAL_RCC_OscConfig+0x348>
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_RCC_OscConfig+0x338>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	e036      	b.n	8001800 <HAL_RCC_OscConfig+0x3a4>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40021000 	.word	0x40021000
 8001798:	fffeffff 	.word	0xfffeffff
 800179c:	fffbffff 	.word	0xfffbffff
 80017a0:	40007000 	.word	0x40007000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x36a>
 80017ac:	4bca      	ldr	r3, [pc, #808]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017ae:	6a1a      	ldr	r2, [r3, #32]
 80017b0:	4bc9      	ldr	r3, [pc, #804]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	438a      	bics	r2, r1
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	4bc7      	ldr	r3, [pc, #796]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	6a1a      	ldr	r2, [r3, #32]
 80017bc:	4bc6      	ldr	r3, [pc, #792]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017be:	2104      	movs	r1, #4
 80017c0:	438a      	bics	r2, r1
 80017c2:	621a      	str	r2, [r3, #32]
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x3a4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x38c>
 80017ce:	4bc2      	ldr	r3, [pc, #776]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	4bc1      	ldr	r3, [pc, #772]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	2104      	movs	r1, #4
 80017d6:	430a      	orrs	r2, r1
 80017d8:	621a      	str	r2, [r3, #32]
 80017da:	4bbf      	ldr	r3, [pc, #764]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	4bbe      	ldr	r3, [pc, #760]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017e0:	2101      	movs	r1, #1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	621a      	str	r2, [r3, #32]
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x3a4>
 80017e8:	4bbb      	ldr	r3, [pc, #748]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	4bba      	ldr	r3, [pc, #744]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	438a      	bics	r2, r1
 80017f2:	621a      	str	r2, [r3, #32]
 80017f4:	4bb8      	ldr	r3, [pc, #736]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	4bb7      	ldr	r3, [pc, #732]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80017fa:	2104      	movs	r1, #4
 80017fc:	438a      	bics	r2, r1
 80017fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d014      	beq.n	8001832 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff fb66 	bl	8000ed8 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e009      	b.n	8001826 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fb61 	bl	8000ed8 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4aaf      	ldr	r2, [pc, #700]	; (8001adc <HAL_RCC_OscConfig+0x680>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e19a      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x3b6>
 8001830:	e013      	b.n	800185a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fb51 	bl	8000ed8 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183a:	e009      	b.n	8001850 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fb4c 	bl	8000ed8 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4aa5      	ldr	r2, [pc, #660]	; (8001adc <HAL_RCC_OscConfig+0x680>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e185      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800185a:	231f      	movs	r3, #31
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001866:	69da      	ldr	r2, [r3, #28]
 8001868:	4b9b      	ldr	r3, [pc, #620]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800186a:	499d      	ldr	r1, [pc, #628]	; (8001ae0 <HAL_RCC_OscConfig+0x684>)
 800186c:	400a      	ands	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	4013      	ands	r3, r2
 8001878:	d063      	beq.n	8001942 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001882:	4b95      	ldr	r3, [pc, #596]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001886:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001888:	2104      	movs	r1, #4
 800188a:	430a      	orrs	r2, r1
 800188c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800188e:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001892:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb1d 	bl	8000ed8 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018a4:	f7ff fb18 	bl	8000ed8 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e152      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d0f1      	beq.n	80018a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c0:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	22f8      	movs	r2, #248	; 0xf8
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	00da      	lsls	r2, r3, #3
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	e034      	b.n	8001942 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	3305      	adds	r3, #5
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018e0:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e4:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	2104      	movs	r1, #4
 80018e8:	438a      	bics	r2, r1
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	22f8      	movs	r2, #248	; 0xf8
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	00da      	lsls	r2, r3, #3
 80018fc:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
 8001902:	e01e      	b.n	8001942 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001904:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001908:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800190a:	2104      	movs	r1, #4
 800190c:	430a      	orrs	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001914:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001916:	2101      	movs	r1, #1
 8001918:	438a      	bics	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fadc 	bl	8000ed8 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001926:	f7ff fad7 	bl	8000ed8 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e111      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1f1      	bne.n	8001926 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2220      	movs	r2, #32
 8001948:	4013      	ands	r3, r2
 800194a:	d05c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800194c:	4b62      	ldr	r3, [pc, #392]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	220c      	movs	r2, #12
 8001952:	4013      	ands	r3, r2
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d00e      	beq.n	8001976 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	220c      	movs	r2, #12
 800195e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001960:	2b08      	cmp	r3, #8
 8001962:	d114      	bne.n	800198e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001964:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	401a      	ands	r2, r3
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	429a      	cmp	r2, r3
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4013      	ands	r3, r2
 8001980:	d040      	beq.n	8001a04 <HAL_RCC_OscConfig+0x5a8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d03c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0e6      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01b      	beq.n	80019ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0249      	lsls	r1, r1, #9
 80019a0:	430a      	orrs	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fa98 	bl	8000ed8 <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ae:	f7ff fa93 	bl	8000ed8 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0cd      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80019c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x552>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	4943      	ldr	r1, [pc, #268]	; (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fa7d 	bl	8000ed8 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e4:	f7ff fa78 	bl	8000ed8 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0b2      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x588>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a04:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5b4>
 8001a0e:	e0a4      	b.n	8001b5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	220c      	movs	r2, #12
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d100      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5c2>
 8001a1c:	e078      	b.n	8001b10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d14c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a2c:	492e      	ldr	r1, [pc, #184]	; (8001ae8 <HAL_RCC_OscConfig+0x68c>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fa51 	bl	8000ed8 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa4c 	bl	8000ed8 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e086      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	049b      	lsls	r3, r3, #18
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	220f      	movs	r2, #15
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_RCC_OscConfig+0x690>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	431a      	orrs	r2, r3
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0449      	lsls	r1, r1, #17
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa1f 	bl	8000ed8 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fa1a 	bl	8000ed8 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e054      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	049b      	lsls	r3, r3, #18
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x644>
 8001abe:	e04c      	b.n	8001b5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <HAL_RCC_OscConfig+0x68c>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fa04 	bl	8000ed8 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x6a6>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	efffffff 	.word	0xefffffff
 8001ae4:	fffeffff 	.word	0xfffeffff
 8001ae8:	feffffff 	.word	0xfeffffff
 8001aec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f9f2 	bl	8000ed8 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e02c      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x708>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	049b      	lsls	r3, r3, #18
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x694>
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01f      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x708>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x708>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d10e      	bne.n	8001b56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	23f0      	movs	r3, #240	; 0xf0
 8001b4a:	039b      	lsls	r3, r3, #14
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b008      	add	sp, #32
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0bf      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d911      	bls.n	8001bae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d015      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d006      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc8:	21e0      	movs	r1, #224	; 0xe0
 8001bca:	00c9      	lsls	r1, r1, #3
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	22f0      	movs	r2, #240	; 0xf0
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	d04c      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d120      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	049b      	lsls	r3, r3, #18
 8001c16:	4013      	ands	r3, r2
 8001c18:	d114      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e062      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e05b      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c58:	f7ff f93e 	bl	8000ed8 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c62:	f7ff f939 	bl	8000ed8 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4a27      	ldr	r2, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1a4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e042      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1ec      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d211      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCC_ClockConfig+0x19c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e020      	b.n	8001cfc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d009      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_RCC_ClockConfig+0x1a8>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cd8:	f000 f820 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cdc:	0001      	movs	r1, r0
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1ac>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	000a      	movs	r2, r1
 8001cee:	40da      	lsrs	r2, r3
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f8a9 	bl	8000e4c <HAL_InitTick>
  
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b004      	add	sp, #16
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	00001388 	.word	0x00001388
 8001d10:	fffff8ff 	.word	0xfffff8ff
 8001d14:	080035b8 	.word	0x080035b8
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b08f      	sub	sp, #60	; 0x3c
 8001d20:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d22:	2314      	movs	r3, #20
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d2a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d36:	c313      	stmia	r3!, {r0, r1, r4}
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	220c      	movs	r2, #12
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d047      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0xd4>
 8001d60:	d849      	bhi.n	8001df6 <HAL_RCC_GetSysClockFreq+0xda>
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x50>
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x56>
 8001d6a:	e044      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d70:	e044      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	220f      	movs	r2, #15
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2214      	movs	r2, #20
 8001d7c:	18ba      	adds	r2, r7, r2
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	220f      	movs	r2, #15
 8001d88:	4013      	ands	r3, r2
 8001d8a:	1d3a      	adds	r2, r7, #4
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d92:	23c0      	movs	r3, #192	; 0xc0
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d109      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da4:	f7fe f9b0 	bl	8000108 <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	001a      	movs	r2, r3
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	4353      	muls	r3, r2
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
 8001db2:	e01a      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	401a      	ands	r2, r3
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d109      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dc8:	f7fe f99e 	bl	8000108 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	4353      	muls	r3, r2
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ddc:	f7fe f994 	bl	8000108 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	001a      	movs	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	4353      	muls	r3, r2
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dee:	e005      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df4:	e002      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b00f      	add	sp, #60	; 0x3c
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	08003518 	.word	0x08003518
 8001e0c:	08003528 	.word	0x08003528
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200
 8001e18:	02dc6c00 	.word	0x02dc6c00

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e34:	f7ff fff2 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e38:	0001      	movs	r1, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	2207      	movs	r2, #7
 8001e42:	4013      	ands	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	40d9      	lsrs	r1, r3
 8001e4a:	000b      	movs	r3, r1
}    
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	080035c8 	.word	0x080035c8

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e042      	b.n	8001ef4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	223d      	movs	r2, #61	; 0x3d
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223c      	movs	r2, #60	; 0x3c
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fead 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	; 0x3d
 8001e8e:	2102      	movs	r1, #2
 8001e90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	f000 fc33 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2246      	movs	r2, #70	; 0x46
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223e      	movs	r2, #62	; 0x3e
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2241      	movs	r2, #65	; 0x41
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2242      	movs	r2, #66	; 0x42
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2243      	movs	r2, #67	; 0x43
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2244      	movs	r2, #68	; 0x44
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2245      	movs	r2, #69	; 0x45
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223d      	movs	r2, #61	; 0x3d
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	223d      	movs	r2, #61	; 0x3d
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e036      	b.n	8001f82 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	223d      	movs	r2, #61	; 0x3d
 8001f18:	2102      	movs	r1, #2
 8001f1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2101      	movs	r1, #1
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_TIM_Base_Start_IT+0x90>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00a      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x50>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	05db      	lsls	r3, r3, #23
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d004      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x50>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_TIM_Base_Start_IT+0x94>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d111      	bne.n	8001f70 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d010      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	e007      	b.n	8001f80 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40000400 	.word	0x40000400

08001f94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e042      	b.n	800202c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223d      	movs	r2, #61	; 0x3d
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223c      	movs	r2, #60	; 0x3c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f839 	bl	8002034 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223d      	movs	r2, #61	; 0x3d
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	f000 fb97 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2246      	movs	r2, #70	; 0x46
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223e      	movs	r2, #62	; 0x3e
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223f      	movs	r2, #63	; 0x3f
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2241      	movs	r2, #65	; 0x41
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2242      	movs	r2, #66	; 0x42
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2243      	movs	r2, #67	; 0x43
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2244      	movs	r2, #68	; 0x44
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2245      	movs	r2, #69	; 0x45
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223d      	movs	r2, #61	; 0x3d
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	230f      	movs	r3, #15
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <HAL_TIM_IC_Start_IT+0x22>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	223e      	movs	r2, #62	; 0x3e
 8002060:	5c9b      	ldrb	r3, [r3, r2]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e013      	b.n	800208e <HAL_TIM_IC_Start_IT+0x4a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d104      	bne.n	8002076 <HAL_TIM_IC_Start_IT+0x32>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223f      	movs	r2, #63	; 0x3f
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	e00b      	b.n	800208e <HAL_TIM_IC_Start_IT+0x4a>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d104      	bne.n	8002086 <HAL_TIM_IC_Start_IT+0x42>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e003      	b.n	800208e <HAL_TIM_IC_Start_IT+0x4a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	220e      	movs	r2, #14
 8002090:	18ba      	adds	r2, r7, r2
 8002092:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_TIM_IC_Start_IT+0x60>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2242      	movs	r2, #66	; 0x42
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e013      	b.n	80020cc <HAL_TIM_IC_Start_IT+0x88>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d104      	bne.n	80020b4 <HAL_TIM_IC_Start_IT+0x70>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2243      	movs	r2, #67	; 0x43
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e00b      	b.n	80020cc <HAL_TIM_IC_Start_IT+0x88>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d104      	bne.n	80020c4 <HAL_TIM_IC_Start_IT+0x80>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2244      	movs	r2, #68	; 0x44
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e003      	b.n	80020cc <HAL_TIM_IC_Start_IT+0x88>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2245      	movs	r2, #69	; 0x45
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	210d      	movs	r1, #13
 80020ce:	187a      	adds	r2, r7, r1
 80020d0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80020d2:	230e      	movs	r3, #14
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d103      	bne.n	80020e4 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d001      	beq.n	80020e8 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0ac      	b.n	8002242 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_TIM_IC_Start_IT+0xb4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223e      	movs	r2, #62	; 0x3e
 80020f2:	2102      	movs	r1, #2
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	e013      	b.n	8002120 <HAL_TIM_IC_Start_IT+0xdc>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d104      	bne.n	8002108 <HAL_TIM_IC_Start_IT+0xc4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	2102      	movs	r1, #2
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	e00b      	b.n	8002120 <HAL_TIM_IC_Start_IT+0xdc>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d104      	bne.n	8002118 <HAL_TIM_IC_Start_IT+0xd4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	2102      	movs	r1, #2
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	e003      	b.n	8002120 <HAL_TIM_IC_Start_IT+0xdc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2241      	movs	r2, #65	; 0x41
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_TIM_IC_Start_IT+0xec>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2242      	movs	r2, #66	; 0x42
 800212a:	2102      	movs	r1, #2
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	e013      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x114>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d104      	bne.n	8002140 <HAL_TIM_IC_Start_IT+0xfc>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2243      	movs	r2, #67	; 0x43
 800213a:	2102      	movs	r1, #2
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	e00b      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x114>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d104      	bne.n	8002150 <HAL_TIM_IC_Start_IT+0x10c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2244      	movs	r2, #68	; 0x44
 800214a:	2102      	movs	r1, #2
 800214c:	5499      	strb	r1, [r3, r2]
 800214e:	e003      	b.n	8002158 <HAL_TIM_IC_Start_IT+0x114>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2245      	movs	r2, #69	; 0x45
 8002154:	2102      	movs	r1, #2
 8002156:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d02a      	beq.n	80021b4 <HAL_TIM_IC_Start_IT+0x170>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d830      	bhi.n	80021c6 <HAL_TIM_IC_Start_IT+0x182>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d01b      	beq.n	80021a2 <HAL_TIM_IC_Start_IT+0x15e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d82a      	bhi.n	80021c6 <HAL_TIM_IC_Start_IT+0x182>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IC_Start_IT+0x13a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d009      	beq.n	8002190 <HAL_TIM_IC_Start_IT+0x14c>
 800217c:	e023      	b.n	80021c6 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2102      	movs	r1, #2
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
      break;
 800218e:	e01f      	b.n	80021d0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2104      	movs	r1, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]
      break;
 80021a0:	e016      	b.n	80021d0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2108      	movs	r1, #8
 80021ae:	430a      	orrs	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
      break;
 80021b2:	e00d      	b.n	80021d0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2110      	movs	r1, #16
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]
      break;
 80021c4:	e004      	b.n	80021d0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80021c6:	230f      	movs	r3, #15
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
      break;
 80021ce:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d130      	bne.n	800223c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fd80 	bl	8002ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_TIM_IC_Start_IT+0x208>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00a      	beq.n	8002208 <HAL_TIM_IC_Start_IT+0x1c4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_IC_Start_IT+0x1c4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <HAL_TIM_IC_Start_IT+0x20c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d111      	bne.n	800222c <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2207      	movs	r2, #7
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d010      	beq.n	800223c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	e007      	b.n	800223c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400

08002254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d124      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2202      	movs	r2, #2
 8002272:	4013      	ands	r3, r2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d11d      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2203      	movs	r2, #3
 800227e:	4252      	negs	r2, r2
 8002280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2203      	movs	r2, #3
 8002290:	4013      	ands	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 fa1e 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 800229c:	e007      	b.n	80022ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe fc25 	bl	8000af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fa1d 	bl	80026e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d125      	bne.n	800230e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2204      	movs	r2, #4
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d11e      	bne.n	800230e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2205      	movs	r2, #5
 80022d6:	4252      	negs	r2, r2
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f9f1 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 80022f6:	e007      	b.n	8002308 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fe fbf8 	bl	8000af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f9f0 	bl	80026e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2208      	movs	r2, #8
 8002316:	4013      	ands	r3, r2
 8002318:	2b08      	cmp	r3, #8
 800231a:	d124      	bne.n	8002366 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2208      	movs	r2, #8
 8002324:	4013      	ands	r3, r2
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11d      	bne.n	8002366 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2209      	movs	r2, #9
 8002330:	4252      	negs	r2, r2
 8002332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2204      	movs	r2, #4
 8002338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2203      	movs	r2, #3
 8002342:	4013      	ands	r3, r2
 8002344:	d004      	beq.n	8002350 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f9c5 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 800234e:	e007      	b.n	8002360 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f7fe fbcc 	bl	8000af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f9c4 	bl	80026e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2210      	movs	r2, #16
 800236e:	4013      	ands	r3, r2
 8002370:	2b10      	cmp	r3, #16
 8002372:	d125      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2210      	movs	r2, #16
 800237c:	4013      	ands	r3, r2
 800237e:	2b10      	cmp	r3, #16
 8002380:	d11e      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2211      	movs	r2, #17
 8002388:	4252      	negs	r2, r2
 800238a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2208      	movs	r2, #8
 8002390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 f998 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e007      	b.n	80023ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fe fb9f 	bl	8000af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f997 	bl	80026e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10f      	bne.n	80023ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2202      	movs	r2, #2
 80023e2:	4252      	negs	r2, r2
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7fe fb95 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d10f      	bne.n	800241c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	4013      	ands	r3, r2
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d108      	bne.n	800241c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2281      	movs	r2, #129	; 0x81
 8002410:	4252      	negs	r2, r2
 8002412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fcea 	bl	8002df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	4013      	ands	r3, r2
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d10f      	bne.n	800244a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	4013      	ands	r3, r2
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d108      	bne.n	800244a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2241      	movs	r2, #65	; 0x41
 800243e:	4252      	negs	r2, r2
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f957 	bl	80026f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2220      	movs	r2, #32
 8002452:	4013      	ands	r3, r2
 8002454:	2b20      	cmp	r3, #32
 8002456:	d10f      	bne.n	8002478 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	4013      	ands	r3, r2
 8002462:	2b20      	cmp	r3, #32
 8002464:	d108      	bne.n	8002478 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2221      	movs	r2, #33	; 0x21
 800246c:	4252      	negs	r2, r2
 800246e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fcb4 	bl	8002de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2317      	movs	r3, #23
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	223c      	movs	r2, #60	; 0x3c
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_OC_ConfigChannel+0x22>
 800249e:	2302      	movs	r3, #2
 80024a0:	e042      	b.n	8002528 <HAL_TIM_OC_ConfigChannel+0xa8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	223c      	movs	r2, #60	; 0x3c
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d027      	beq.n	8002500 <HAL_TIM_OC_ConfigChannel+0x80>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d82c      	bhi.n	8002510 <HAL_TIM_OC_ConfigChannel+0x90>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d019      	beq.n	80024f0 <HAL_TIM_OC_ConfigChannel+0x70>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d826      	bhi.n	8002510 <HAL_TIM_OC_ConfigChannel+0x90>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_TIM_OC_ConfigChannel+0x50>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d008      	beq.n	80024e0 <HAL_TIM_OC_ConfigChannel+0x60>
 80024ce:	e01f      	b.n	8002510 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f98b 	bl	80027f4 <TIM_OC1_SetConfig>
      break;
 80024de:	e01c      	b.n	800251a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	0011      	movs	r1, r2
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fa01 	bl	80028f0 <TIM_OC2_SetConfig>
      break;
 80024ee:	e014      	b.n	800251a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fa77 	bl	80029ec <TIM_OC3_SetConfig>
      break;
 80024fe:	e00c      	b.n	800251a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	0011      	movs	r1, r2
 8002508:	0018      	movs	r0, r3
 800250a:	f000 faef 	bl	8002aec <TIM_OC4_SetConfig>
      break;
 800250e:	e004      	b.n	800251a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002510:	2317      	movs	r3, #23
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
      break;
 8002518:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	223c      	movs	r2, #60	; 0x3c
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

  return status;
 8002522:	2317      	movs	r3, #23
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	781b      	ldrb	r3, [r3, #0]
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b006      	add	sp, #24
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	230f      	movs	r3, #15
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	223c      	movs	r2, #60	; 0x3c
 8002546:	5c9b      	ldrb	r3, [r3, r2]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIM_ConfigClockSource+0x20>
 800254c:	2302      	movs	r3, #2
 800254e:	e0bc      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x19a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223c      	movs	r2, #60	; 0x3c
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	223d      	movs	r2, #61	; 0x3d
 800255c:	2102      	movs	r1, #2
 800255e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2277      	movs	r2, #119	; 0x77
 800256c:	4393      	bics	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	0192      	lsls	r2, r2, #6
 8002588:	4293      	cmp	r3, r2
 800258a:	d040      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xde>
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	0192      	lsls	r2, r2, #6
 8002590:	4293      	cmp	r3, r2
 8002592:	d900      	bls.n	8002596 <HAL_TIM_ConfigClockSource+0x66>
 8002594:	e088      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0152      	lsls	r2, r2, #5
 800259a:	4293      	cmp	r3, r2
 800259c:	d100      	bne.n	80025a0 <HAL_TIM_ConfigClockSource+0x70>
 800259e:	e088      	b.n	80026b2 <HAL_TIM_ConfigClockSource+0x182>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0152      	lsls	r2, r2, #5
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d900      	bls.n	80025aa <HAL_TIM_ConfigClockSource+0x7a>
 80025a8:	e07e      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025aa:	2b70      	cmp	r3, #112	; 0x70
 80025ac:	d018      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xb0>
 80025ae:	d900      	bls.n	80025b2 <HAL_TIM_ConfigClockSource+0x82>
 80025b0:	e07a      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025b2:	2b60      	cmp	r3, #96	; 0x60
 80025b4:	d04f      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x126>
 80025b6:	d900      	bls.n	80025ba <HAL_TIM_ConfigClockSource+0x8a>
 80025b8:	e076      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025ba:	2b50      	cmp	r3, #80	; 0x50
 80025bc:	d03b      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x106>
 80025be:	d900      	bls.n	80025c2 <HAL_TIM_ConfigClockSource+0x92>
 80025c0:	e072      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d057      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x146>
 80025c6:	d900      	bls.n	80025ca <HAL_TIM_ConfigClockSource+0x9a>
 80025c8:	e06e      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d063      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x166>
 80025ce:	d86b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d060      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x166>
 80025d4:	d868      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d05d      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x166>
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d05b      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x166>
 80025de:	e063      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f000 fb5a 	bl	8002ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2277      	movs	r2, #119	; 0x77
 8002600:	4313      	orrs	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e052      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f000 fb43 	bl	8002ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	01c9      	lsls	r1, r1, #7
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e03e      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	001a      	movs	r2, r3
 8002644:	f000 fab6 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2150      	movs	r1, #80	; 0x50
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fb10 	bl	8002c74 <TIM_ITRx_SetConfig>
      break;
 8002654:	e02e      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	001a      	movs	r2, r3
 8002664:	f000 fad4 	bl	8002c10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2160      	movs	r1, #96	; 0x60
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fb00 	bl	8002c74 <TIM_ITRx_SetConfig>
      break;
 8002674:	e01e      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	001a      	movs	r2, r3
 8002684:	f000 fa96 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	0018      	movs	r0, r3
 8002690:	f000 faf0 	bl	8002c74 <TIM_ITRx_SetConfig>
      break;
 8002694:	e00e      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0019      	movs	r1, r3
 80026a0:	0010      	movs	r0, r2
 80026a2:	f000 fae7 	bl	8002c74 <TIM_ITRx_SetConfig>
      break;
 80026a6:	e005      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80026a8:	230f      	movs	r3, #15
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
      break;
 80026b0:	e000      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80026b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223d      	movs	r2, #61	; 0x3d
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223c      	movs	r2, #60	; 0x3c
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

  return status;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	ffff00ff 	.word	0xffff00ff

080026d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a30      	ldr	r2, [pc, #192]	; (80027dc <TIM_Base_SetConfig+0xd4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d008      	beq.n	8002732 <TIM_Base_SetConfig+0x2a>
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	429a      	cmp	r2, r3
 8002728:	d003      	beq.n	8002732 <TIM_Base_SetConfig+0x2a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <TIM_Base_SetConfig+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d108      	bne.n	8002744 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2270      	movs	r2, #112	; 0x70
 8002736:	4393      	bics	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a25      	ldr	r2, [pc, #148]	; (80027dc <TIM_Base_SetConfig+0xd4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d014      	beq.n	8002776 <TIM_Base_SetConfig+0x6e>
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	05db      	lsls	r3, r3, #23
 8002752:	429a      	cmp	r2, r3
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0x6e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <TIM_Base_SetConfig+0xd8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0x6e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <TIM_Base_SetConfig+0xdc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0x6e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <TIM_Base_SetConfig+0xe0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0x6e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <TIM_Base_SetConfig+0xe8>)
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	4393      	bics	r3, r2
 800278e:	001a      	movs	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <TIM_Base_SetConfig+0xd4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <TIM_Base_SetConfig+0xbe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <TIM_Base_SetConfig+0xe0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_Base_SetConfig+0xbe>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d103      	bne.n	80027ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	615a      	str	r2, [r3, #20]
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40002000 	.word	0x40002000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800
 80027f0:	fffffcff 	.word	0xfffffcff

080027f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2201      	movs	r2, #1
 8002804:	4393      	bics	r3, r2
 8002806:	001a      	movs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2270      	movs	r2, #112	; 0x70
 8002822:	4393      	bics	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2203      	movs	r2, #3
 800282a:	4393      	bics	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2202      	movs	r2, #2
 800283c:	4393      	bics	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <TIM_OC1_SetConfig+0xe8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <TIM_OC1_SetConfig+0x6e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <TIM_OC1_SetConfig+0xec>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_OC1_SetConfig+0x6e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <TIM_OC1_SetConfig+0xf0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10c      	bne.n	800287c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2208      	movs	r2, #8
 8002866:	4393      	bics	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2204      	movs	r2, #4
 8002878:	4393      	bics	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <TIM_OC1_SetConfig+0xe8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_OC1_SetConfig+0xa0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <TIM_OC1_SetConfig+0xec>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_OC1_SetConfig+0xa0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <TIM_OC1_SetConfig+0xf0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <TIM_OC1_SetConfig+0xf4>)
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <TIM_OC1_SetConfig+0xf8>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b006      	add	sp, #24
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800
 80028e8:	fffffeff 	.word	0xfffffeff
 80028ec:	fffffdff 	.word	0xfffffdff

080028f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	2210      	movs	r2, #16
 8002900:	4393      	bics	r3, r2
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <TIM_OC2_SetConfig+0xe0>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <TIM_OC2_SetConfig+0xe4>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2220      	movs	r2, #32
 800293a:	4393      	bics	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <TIM_OC2_SetConfig+0xe8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10d      	bne.n	800296e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	4393      	bics	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	4393      	bics	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <TIM_OC2_SetConfig+0xe8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_OC2_SetConfig+0x96>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <TIM_OC2_SetConfig+0xec>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_OC2_SetConfig+0x96>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <TIM_OC2_SetConfig+0xf0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d113      	bne.n	80029ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC2_SetConfig+0xf4>)
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC2_SetConfig+0xf8>)
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b006      	add	sp, #24
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	ffff8fff 	.word	0xffff8fff
 80029d4:	fffffcff 	.word	0xfffffcff
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	fffffbff 	.word	0xfffffbff
 80029e8:	fffff7ff 	.word	0xfffff7ff

080029ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <TIM_OC3_SetConfig+0xdc>)
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2270      	movs	r2, #112	; 0x70
 8002a18:	4393      	bics	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	4393      	bics	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_OC3_SetConfig+0xe0>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <TIM_OC3_SetConfig+0xe4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10d      	bne.n	8002a66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <TIM_OC3_SetConfig+0xe8>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <TIM_OC3_SetConfig+0xec>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <TIM_OC3_SetConfig+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_OC3_SetConfig+0x92>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <TIM_OC3_SetConfig+0xf0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC3_SetConfig+0x92>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_OC3_SetConfig+0xf4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <TIM_OC3_SetConfig+0xf8>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <TIM_OC3_SetConfig+0xfc>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	fffffeff 	.word	0xfffffeff
 8002acc:	fffffdff 	.word	0xfffffdff
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	fffff7ff 	.word	0xfffff7ff
 8002ad8:	fffffbff 	.word	0xfffffbff
 8002adc:	40014400 	.word	0x40014400
 8002ae0:	40014800 	.word	0x40014800
 8002ae4:	ffffefff 	.word	0xffffefff
 8002ae8:	ffffdfff 	.word	0xffffdfff

08002aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <TIM_OC4_SetConfig+0xa8>)
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <TIM_OC4_SetConfig+0xac>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <TIM_OC4_SetConfig+0xb0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <TIM_OC4_SetConfig+0xb4>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	031b      	lsls	r3, r3, #12
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <TIM_OC4_SetConfig+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_OC4_SetConfig+0x70>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <TIM_OC4_SetConfig+0xbc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_OC4_SetConfig+0x70>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a15      	ldr	r2, [pc, #84]	; (8002bac <TIM_OC4_SetConfig+0xc0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d109      	bne.n	8002b70 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <TIM_OC4_SetConfig+0xc4>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	ffffefff 	.word	0xffffefff
 8002b98:	ffff8fff 	.word	0xffff8fff
 8002b9c:	fffffcff 	.word	0xfffffcff
 8002ba0:	ffffdfff 	.word	0xffffdfff
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800
 8002bb0:	ffffbfff 	.word	0xffffbfff

08002bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4393      	bics	r3, r2
 8002bce:	001a      	movs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	22f0      	movs	r2, #240	; 0xf0
 8002bde:	4393      	bics	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	220a      	movs	r2, #10
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b006      	add	sp, #24
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	2210      	movs	r2, #16
 8002c22:	4393      	bics	r3, r2
 8002c24:	001a      	movs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <TIM_TI2_ConfigInputStage+0x60>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	22a0      	movs	r2, #160	; 0xa0
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b006      	add	sp, #24
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	ffff0fff 	.word	0xffff0fff

08002c74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2270      	movs	r2, #112	; 0x70
 8002c88:	4393      	bics	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	2207      	movs	r2, #7
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b004      	add	sp, #16
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <TIM_ETR_SetConfig+0x3c>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	021a      	lsls	r2, r3, #8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b006      	add	sp, #24
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	ffff00ff 	.word	0xffff00ff

08002ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	221f      	movs	r2, #31
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	0013      	movs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	43d2      	mvns	r2, r2
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	211f      	movs	r1, #31
 8002d18:	400b      	ands	r3, r1
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4099      	lsls	r1, r3
 8002d1e:	000b      	movs	r3, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b006      	add	sp, #24
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	223c      	movs	r2, #60	; 0x3c
 8002d3e:	5c9b      	ldrb	r3, [r3, r2]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e042      	b.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	223c      	movs	r2, #60	; 0x3c
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	223d      	movs	r2, #61	; 0x3d
 8002d54:	2102      	movs	r1, #2
 8002d56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2270      	movs	r2, #112	; 0x70
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00a      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	05db      	lsls	r3, r3, #23
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d004      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10c      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	4393      	bics	r3, r2
 8002da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223d      	movs	r2, #61	; 0x3d
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	223c      	movs	r2, #60	; 0x3c
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400

08002de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e044      	b.n	8002e9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2274      	movs	r2, #116	; 0x74
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fd ff21 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2224      	movs	r2, #36	; 0x24
 8002e2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f830 	bl	8002ea8 <UART_SetConfig>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e024      	b.n	8002e9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 f963 	bl	8003128 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <HAL_UART_Init+0xa4>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	212a      	movs	r1, #42	; 0x2a
 8002e7e:	438a      	bics	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 f9fb 	bl	8003290 <UART_CheckIdleState>
 8002e9a:	0003      	movs	r3, r0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffffb7ff 	.word	0xffffb7ff

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb0:	231e      	movs	r3, #30
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8d      	ldr	r2, [pc, #564]	; (800310c <UART_SetConfig+0x264>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a88      	ldr	r2, [pc, #544]	; (8003110 <UART_SetConfig+0x268>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <UART_SetConfig+0x26c>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7b      	ldr	r2, [pc, #492]	; (8003118 <UART_SetConfig+0x270>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d127      	bne.n	8002f7e <UART_SetConfig+0xd6>
 8002f2e:	4b7b      	ldr	r3, [pc, #492]	; (800311c <UART_SetConfig+0x274>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2203      	movs	r2, #3
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d00d      	beq.n	8002f56 <UART_SetConfig+0xae>
 8002f3a:	d81b      	bhi.n	8002f74 <UART_SetConfig+0xcc>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d014      	beq.n	8002f6a <UART_SetConfig+0xc2>
 8002f40:	d818      	bhi.n	8002f74 <UART_SetConfig+0xcc>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <UART_SetConfig+0xa4>
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d00a      	beq.n	8002f60 <UART_SetConfig+0xb8>
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0xcc>
 8002f4c:	231f      	movs	r3, #31
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e021      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f56:	231f      	movs	r3, #31
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e01c      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f60:	231f      	movs	r3, #31
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e017      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f6a:	231f      	movs	r3, #31
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2208      	movs	r2, #8
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e012      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f74:	231f      	movs	r3, #31
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2210      	movs	r2, #16
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e00d      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <UART_SetConfig+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d104      	bne.n	8002f92 <UART_SetConfig+0xea>
 8002f88:	231f      	movs	r3, #31
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e003      	b.n	8002f9a <UART_SetConfig+0xf2>
 8002f92:	231f      	movs	r3, #31
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2210      	movs	r2, #16
 8002f98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d15d      	bne.n	8003062 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002fa6:	231f      	movs	r3, #31
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d015      	beq.n	8002fdc <UART_SetConfig+0x134>
 8002fb0:	dc18      	bgt.n	8002fe4 <UART_SetConfig+0x13c>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00d      	beq.n	8002fd2 <UART_SetConfig+0x12a>
 8002fb6:	dc15      	bgt.n	8002fe4 <UART_SetConfig+0x13c>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <UART_SetConfig+0x11a>
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d005      	beq.n	8002fcc <UART_SetConfig+0x124>
 8002fc0:	e010      	b.n	8002fe4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc2:	f7fe ff35 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	61bb      	str	r3, [r7, #24]
        break;
 8002fca:	e012      	b.n	8002ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <UART_SetConfig+0x27c>)
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e00f      	b.n	8002ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7fe fea3 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	61bb      	str	r3, [r7, #24]
        break;
 8002fda:	e00a      	b.n	8002ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	61bb      	str	r3, [r7, #24]
        break;
 8002fe2:	e006      	b.n	8002ff2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe8:	231e      	movs	r3, #30
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
        break;
 8002ff0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d100      	bne.n	8002ffa <UART_SetConfig+0x152>
 8002ff8:	e07b      	b.n	80030f2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	005a      	lsls	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	18d2      	adds	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f7fd f87b 	bl	8000108 <__udivsi3>
 8003012:	0003      	movs	r3, r0
 8003014:	b29b      	uxth	r3, r3
 8003016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	d91c      	bls.n	8003058 <UART_SetConfig+0x1b0>
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	025b      	lsls	r3, r3, #9
 8003024:	429a      	cmp	r2, r3
 8003026:	d217      	bcs.n	8003058 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	b29a      	uxth	r2, r3
 800302c:	200e      	movs	r0, #14
 800302e:	183b      	adds	r3, r7, r0
 8003030:	210f      	movs	r1, #15
 8003032:	438a      	bics	r2, r1
 8003034:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	b299      	uxth	r1, r3
 8003042:	183b      	adds	r3, r7, r0
 8003044:	183a      	adds	r2, r7, r0
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	183a      	adds	r2, r7, r0
 8003052:	8812      	ldrh	r2, [r2, #0]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e04c      	b.n	80030f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003058:	231e      	movs	r3, #30
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e047      	b.n	80030f2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003062:	231f      	movs	r3, #31
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d015      	beq.n	8003098 <UART_SetConfig+0x1f0>
 800306c:	dc18      	bgt.n	80030a0 <UART_SetConfig+0x1f8>
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00d      	beq.n	800308e <UART_SetConfig+0x1e6>
 8003072:	dc15      	bgt.n	80030a0 <UART_SetConfig+0x1f8>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <UART_SetConfig+0x1d6>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d005      	beq.n	8003088 <UART_SetConfig+0x1e0>
 800307c:	e010      	b.n	80030a0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307e:	f7fe fed7 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
        break;
 8003086:	e012      	b.n	80030ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <UART_SetConfig+0x27c>)
 800308a:	61bb      	str	r3, [r7, #24]
        break;
 800308c:	e00f      	b.n	80030ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308e:	f7fe fe45 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8003092:	0003      	movs	r3, r0
 8003094:	61bb      	str	r3, [r7, #24]
        break;
 8003096:	e00a      	b.n	80030ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	61bb      	str	r3, [r7, #24]
        break;
 800309e:	e006      	b.n	80030ae <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030a4:	231e      	movs	r3, #30
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
        break;
 80030ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01e      	beq.n	80030f2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	085a      	lsrs	r2, r3, #1
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	18d2      	adds	r2, r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f7fd f81f 	bl	8000108 <__udivsi3>
 80030ca:	0003      	movs	r3, r0
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d909      	bls.n	80030ea <UART_SetConfig+0x242>
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d204      	bcs.n	80030ea <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e003      	b.n	80030f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80030ea:	231e      	movs	r3, #30
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030fe:	231e      	movs	r3, #30
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	781b      	ldrb	r3, [r3, #0]
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b008      	add	sp, #32
 800310a:	bd80      	pop	{r7, pc}
 800310c:	efff69f3 	.word	0xefff69f3
 8003110:	ffffcfff 	.word	0xffffcfff
 8003114:	fffff4ff 	.word	0xfffff4ff
 8003118:	40013800 	.word	0x40013800
 800311c:	40021000 	.word	0x40021000
 8003120:	40004400 	.word	0x40004400
 8003124:	007a1200 	.word	0x007a1200

08003128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <UART_AdvFeatureConfig+0x144>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <UART_AdvFeatureConfig+0x148>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <UART_AdvFeatureConfig+0x14c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2208      	movs	r2, #8
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a34      	ldr	r2, [pc, #208]	; (8003278 <UART_AdvFeatureConfig+0x150>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	; (800327c <UART_AdvFeatureConfig+0x154>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <UART_AdvFeatureConfig+0x158>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	d01d      	beq.n	8003242 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <UART_AdvFeatureConfig+0x15c>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	035b      	lsls	r3, r3, #13
 8003226:	429a      	cmp	r2, r3
 8003228:	d10b      	bne.n	8003242 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <UART_AdvFeatureConfig+0x160>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	4013      	ands	r3, r2
 800324a:	d00b      	beq.n	8003264 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <UART_AdvFeatureConfig+0x164>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	fffdffff 	.word	0xfffdffff
 8003270:	fffeffff 	.word	0xfffeffff
 8003274:	fffbffff 	.word	0xfffbffff
 8003278:	ffff7fff 	.word	0xffff7fff
 800327c:	ffffefff 	.word	0xffffefff
 8003280:	ffffdfff 	.word	0xffffdfff
 8003284:	ffefffff 	.word	0xffefffff
 8003288:	ff9fffff 	.word	0xff9fffff
 800328c:	fff7ffff 	.word	0xfff7ffff

08003290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	2100      	movs	r1, #0
 800329e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a0:	f7fd fe1a 	bl	8000ed8 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2208      	movs	r2, #8
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d10c      	bne.n	80032d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0391      	lsls	r1, r2, #14
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4a17      	ldr	r2, [pc, #92]	; (800331c <UART_CheckIdleState+0x8c>)
 80032c0:	9200      	str	r2, [sp, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f000 f82c 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d001      	beq.n	80032d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e021      	b.n	8003314 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	4013      	ands	r3, r2
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d10c      	bne.n	80032f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	03d1      	lsls	r1, r2, #15
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4a0d      	ldr	r2, [pc, #52]	; (800331c <UART_CheckIdleState+0x8c>)
 80032e8:	9200      	str	r2, [sp, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f000 f818 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d001      	beq.n	80032f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e00d      	b.n	8003314 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2274      	movs	r2, #116	; 0x74
 800330e:	2100      	movs	r1, #0
 8003310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bd80      	pop	{r7, pc}
 800331c:	01ffffff 	.word	0x01ffffff

08003320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b094      	sub	sp, #80	; 0x50
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	e0a3      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	3301      	adds	r3, #1
 8003336:	d100      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003338:	e09f      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fd fdcd 	bl	8000ed8 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <UART_WaitOnFlagUntilTimeout+0x30>
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	2b00      	cmp	r3, #0
 800334e:	d13d      	bne.n	80033cc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	2301      	movs	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	494c      	ldr	r1, [pc, #304]	; (80034a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003372:	400a      	ands	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003382:	f3ef 8310 	mrs	r3, PRIMASK
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
 800338c:	2301      	movs	r3, #1
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2101      	movs	r1, #1
 80033a4:	438a      	bics	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2274      	movs	r2, #116	; 0x74
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e067      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	d050      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	401a      	ands	r2, r3
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d146      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
 80033fa:	613b      	str	r3, [r7, #16]
  return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4923      	ldr	r1, [pc, #140]	; (80034a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003418:	400a      	ands	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003428:	f3ef 8310 	mrs	r3, PRIMASK
 800342c:	61fb      	str	r3, [r7, #28]
  return(result);
 800342e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	64bb      	str	r3, [r7, #72]	; 0x48
 8003432:	2301      	movs	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2274      	movs	r2, #116	; 0x74
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e010      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	425a      	negs	r2, r3
 800348a:	4153      	adcs	r3, r2
 800348c:	b2db      	uxtb	r3, r3
 800348e:	001a      	movs	r2, r3
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d100      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003498:	e74b      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b014      	add	sp, #80	; 0x50
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	fffffe5f 	.word	0xfffffe5f

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	2600      	movs	r6, #0
 80034ac:	4d0c      	ldr	r5, [pc, #48]	; (80034e0 <__libc_init_array+0x38>)
 80034ae:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034b0:	1b64      	subs	r4, r4, r5
 80034b2:	10a4      	asrs	r4, r4, #2
 80034b4:	42a6      	cmp	r6, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	2600      	movs	r6, #0
 80034ba:	f000 f821 	bl	8003500 <_init>
 80034be:	4d0a      	ldr	r5, [pc, #40]	; (80034e8 <__libc_init_array+0x40>)
 80034c0:	4c0a      	ldr	r4, [pc, #40]	; (80034ec <__libc_init_array+0x44>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	42a6      	cmp	r6, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	00b3      	lsls	r3, r6, #2
 80034ce:	58eb      	ldr	r3, [r5, r3]
 80034d0:	4798      	blx	r3
 80034d2:	3601      	adds	r6, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	58eb      	ldr	r3, [r5, r3]
 80034da:	4798      	blx	r3
 80034dc:	3601      	adds	r6, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	080035d0 	.word	0x080035d0
 80034e4:	080035d0 	.word	0x080035d0
 80034e8:	080035d0 	.word	0x080035d0
 80034ec:	080035d4 	.word	0x080035d4

080034f0 <memset>:
 80034f0:	0003      	movs	r3, r0
 80034f2:	1882      	adds	r2, r0, r2
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d100      	bne.n	80034fa <memset+0xa>
 80034f8:	4770      	bx	lr
 80034fa:	7019      	strb	r1, [r3, #0]
 80034fc:	3301      	adds	r3, #1
 80034fe:	e7f9      	b.n	80034f4 <memset+0x4>

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
